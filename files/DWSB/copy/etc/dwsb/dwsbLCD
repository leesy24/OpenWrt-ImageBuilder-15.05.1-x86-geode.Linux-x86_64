#!/bin/sh
#
#####################################################################
##
##      DWSB LCD_Mon for Chaos Calmer 15.05.1 @linux3.18
##
##            Copyright 2020, by Dasan InfoTek Co.,
##
##                         ...leesy...
##
#####################################################################

# set to null output stderr|stdout redirection
exec 3>&1
exec 4>&2
exec 1>/dev/null
exec 2>/dev/null

#-----------------------------#
### Load dual station roaming configurations from file
[ -e /etc/dwsb/dual_sta_roaming.cfg ] && {
	cp /etc/dwsb/dual_sta_roaming.cfg /tmp/dual_sta_roaming.cfg
	. /tmp/dual_sta_roaming.cfg
}
USE_DUALSTATION_MODE=$_USE_DUALSTATION_MODE
#-----------------------------#

iw phy0 info > /tmp/iw_info_phy_1st
iw phy1 info > /tmp/iw_info_phy_2nd

iface_1st=wlan0
iface_2nd=wlan1
SerialPort=/dev/ttyUSB0

readLines() {
	iwinfo $iface_1st info 2> /dev/null > /tmp/iw_info_$iface_1st
	iwinfo $iface_1st assoclist 2> /dev/null > /tmp/iw_assoclist_$iface_1st
	iwinfo $iface_2nd info 2> /dev/null > /tmp/iw_info_$iface_2nd
	iwinfo $iface_2nd assoclist 2> /dev/null > /tmp/iw_assoclist_$iface_2nd
	
	host=$(uci -q get system.@system[0].hostname)
	ip=$(ip -4 addr show br-lan | sed -Ene 's/^.*inet ([0-9.]+)\/.*$/\1/p')
	[ -z "$ip" ] && ip=$(uci -q get network.lan.ipaddr)

	fstDisabled=$(uci -q get wireless.@wifi-iface[0].disabled)
	fstWds=$(uci -q get wireless.@wifi-iface[0].wds)
	fstImode=$(uci -q get wireless.@wifi-iface[0].mode)
	[ "$fstDisabled" = "1" ] && {
		fstMode="Disabled"
	} || {
		[ "$fstImode" = "ap" ] && {
			[ "$fstWds" = "1" ] && {
				fstMode="APW"
			} || {
				fstMode="AP "
			}
		}
		[ "$fstImode" = "sta" ] && {
			[ "$fstWds" = "1" ] && {
				fstMode="STW"
			} || {
				fstMode="ST "
			}
		}
		[ "$fstImode" != "ap" ] && [ "$fstImode" != "sta" ] && {
			fstMode=$fstImode
		}
	}
	fstSsid=$(uci -q get wireless.@wifi-iface[0].ssid)
	fstCh=$(grep Channel /tmp/iw_info_$iface_1st | awk '{print $4}')
	[ "$fstCh" = "unknown" ] && {
		fstCh=$(uci -q get wireless.radio0.channel)
	}
	[ "$fstCh" = "auto" ] && {
		fstFreq="Auto"
	} || {
		fstFreq=$(grep -E -m1 "(\* .... MHz \[$fstCh\])" /tmp/iw_info_phy_1st | \
			awk '{print $2}' | \
			sed -e "s/\([0-9]\)\([0-9]*\)/\1\.\2/")
	}
	##
	fstSNR=$(grep SNR /tmp/iw_assoclist_$iface_1st | awk -F'[()]' '{print $2}' | awk '{print $2}')
	[ -z "$fstSNR" ] && fstSNR=0
	[ "$fstImode" = "ap" ] && {
		fstCnt=$(grep -cE '^([0-9A-F]{2}:){5}[0-9A-F]{2}' /tmp/iw_assoclist_$iface_1st)
	}
	[ "$fstImode" = "sta" ] && {
		fstAP=$(grep Access /tmp/iw_info_$iface_1st | awk '{ print $3 }')
		if [ -z "$fstAP" ] || [ "$fstAP" = "00:00:00:00:00:00" ] ; then
			fstAP="NotAss"
		else
			fstAP=$(echo $fstAP | cut -c16-)
		fi
	}

	sndDisabled=$(uci -q get wireless.@wifi-iface[1].disabled)
	sndWds=$(uci -q get wireless.@wifi-iface[1].wds)
	sndImode=$(uci -q get wireless.@wifi-iface[1].mode)
	[ "$sndDisabled" = "1" ] && {
		sndMode="Disabled"
	} || {
		[ "$sndImode" = "ap" ] && {
			[ "$sndWds" = "1" ] && {
				sndMode="APW"
			} || {
				sndMode="AP "
			}
		}
		[ "$sndImode" = "sta" ] && {
			[ "$sndWds" = "1" ] && {
				sndMode="STW"
			} || {
				sndMode="ST "
			}
		}
		[ "$sndImode" != "ap" ] && [ "$sndImode" != "sta" ] && {
			sndMode=$sndImode
		}
	}
	sndSsid=$(uci -q get wireless.@wifi-iface[1].ssid)
	sndCh=$(grep Channel /tmp/iw_info_$iface_2nd | awk '{print $4}')
	[ "$sndCh" = "unknown" ] && {
		sndCh=$(uci -q get wireless.radio1.channel)
	}
	[ "$sndCh" = "auto" ] && {
		sndFreq="Auto"
	} || {
		sndFreq=$(grep -E -m1 "(\* .... MHz \[$sndCh\])" /tmp/iw_info_phy_2nd | \
			awk '{print $2}' | \
			sed -e "s/\([0-9]\)\([0-9]*\)/\1\.\2/")
	}
	##
	sndSNR=$(grep SNR /tmp/iw_assoclist_$iface_2nd | awk -F'[()]' '{print $2}' | awk '{print $2}')
	[ -z "$sndSNR" ] && sndSNR=0
	[ "$sndImode" = "ap" ] && {
		sndCnt=$(grep -cE '^([0-9A-F]{2}:){5}[0-9A-F]{2}' /tmp/iw_assoclist_$iface_2nd)
	}
	[ "$sndImode" = "sta" ] && {
		sndAP=$(grep Access /tmp/iw_info_$iface_2nd | awk '{ print $3 }')
		if [ -z "$sndAP" ] || [ "$sndAP" = "00:00:00:00:00:00" ] ; then
			sndAP="NotAss"
		else
			sndAP=$(echo $sndAP | cut -c16-)
		fi
	}

	##
	#rSSID=$(grep SSID /tmp/iw_info_$iface_1st | awk '{print $3" "$4}')

	upTime=$(uptime | cut -c2- | cut -d',' -f1)

	#rDATE=$(date +%Y%m%e)
	#rDATE="$rDATE $upTime"
	#rDATE=$(echo "$rDATE" | sed 's/^ *//g' | cut -c -20)

	## Check Dual Station mode
	if ([ "$USE_DUALSTATION_MODE" = "Y" ] && [ "$fstImode" = "sta" ] && [ "$sndImode" = "sta" ]) ; then
		## Get bridged network info
		brctlShow=$(brctl show)
		## Get first Network bridged
		fstBridged=$(echo $brctlShow | grep -c wlan0)
		## Get second Network bridged
		sndBridged=$(echo $brctlShow | grep -c wlan1)
	else
		## Set default first Network bridged
		fstBridged=1
		## Set default second Network bridged
		sndBridged=1
	fi

	line_1=$(echo "$host $ip                    " | cut -c -20)
	[ "$fstDisabled" = "1" ] && {
		line_2="$fstMode                    "
	} || {
		[ "$fstImode" = "ap" ] && {
			line_2="$fstMode $fstSsid $fstFreq $fstSNR $fstCnt          "
		} || {
			### in case STA
			[ "$fstAP" = "NotAss" ] && {
				[ $fstBridged -eq 1 ] && {
					line_2="$fstMode $fstSsid $fstFreq $fstAP          "
				} || {
					line_2="$fstMode#$fstSsid#$fstFreq#$fstAP##########"
				}
			} || {
				[ $fstBridged -eq 1 ] && {
					line_2="$fstMode $fstSsid $fstFreq $fstSNR $fstAP          "
				} || {
					line_2="$fstMode#$fstSsid#$fstFreq#$fstSNR#$fstAP##########"
				}
			}
		}
	}
	line_2=$(echo "$line_2" | cut -c -20)
	[ "$sndDisabled" = "1" ] && {
		line_3="$sndMode                    "
	} || {
		[ "$sndImode" = "ap" ] && {
			line_3="$sndMode $sndSsid $sndFreq $sndSNR $sndCnt          "
		} || {
			### in case STA
			[ "$sndAP" = "NotAss" ] && {
				[ $sndBridged -eq 1 ] && {
					line_3="$sndMode $sndSsid $sndFreq $sndAP          "
				} || {
					line_3="$sndMode#$sndSsid#$sndFreq#$sndAP##########"
				}
			} || {
				[ $sndBridged -eq 1 ] && {
					line_3="$sndMode $sndSsid $sndFreq $sndSNR $sndAP          "
				} || {
					line_3="$sndMode#$sndSsid#$sndFreq#$sndSNR#$sndAP##########"
				}
			}
		}
	}
	line_3=$(echo "$line_3" | cut -c -20)
	line_4=$(echo "$upTime                    " | cut -c -20)
}

legacyLCDInit() {
	serial_send $SerialPort "\x1B\x43" 1>&3 2>&4
	## Display splash strings
	serial_send $SerialPort "\x1B\x4C\x00\x00DASAN InfoTek       " 1>&3 2>&4
	serial_send $SerialPort "\x1B\x4C\x00\x01 Model:DWSB         " 1>&3 2>&4
	serial_send $SerialPort "\x1B\x4C\x00\x02                    " 1>&3 2>&4
	serial_send $SerialPort "\x1B\x4C\x00\x03     www.dsintek.com" 1>&3 2>&4
}

cfaLCDInit() {
	### Init CFA LCD
	## Set keypad backlight off
	cfa_send $SerialPort "\x0e\d002\d100\d000" 1>&3 2>&4
	## Display splash strings
	cfa_send $SerialPort "\x1f\d022\d000\d000DASAN InfoTek       " 1>&3 2>&4
	cfa_send $SerialPort "\x1f\d022\d000\d001 Model:DWSB         " 1>&3 2>&4
	cfa_send $SerialPort "\x1f\d022\d000\d002                    " 1>&3 2>&4
	cfa_send $SerialPort "\x1f\d022\d000\d003     www.dsintek.com" 1>&3 2>&4
	## Store current state as boot state
	cfa_send $SerialPort "\x04\d000" 1>&3 2>&4
}

### Start of main script

### Check and wait USB serial character device file exists
USB_SERIAL_DEV_EXIST=-1
while [ ! -c $SerialPort ] ; do
	sleep 1 # wait 1sec
	[ $USB_SERIAL_DEV_EXIST -ne 0 ] && {
		echo "dwsbLCD: Check inserted the USB serial LCD!" > /dev/kmsg
		USB_SERIAL_DEV_EXIST=0
	}
done
USB_SERIAL_DEV_EXIST=1
#sleep 1 # wait 1sec

### Check CFA LCD
## Ping LCD
cfa_send $SerialPort "\x00\d000" 1>&3 2>&4
if [ $? -eq 0 ] ; then
	CFA_DETECTED=1
	echo "dwsbLCD: Detected CFA LCD!" > /dev/kmsg
else
	CFA_DETECTED=0
	echo "dwsbLCD: Detected legacy LCD!" > /dev/kmsg
fi

# Init LCD
if [ $CFA_DETECTED -eq 1 ] ; then
	cfaLCDInit
else
	legacyLCDInit
fi

# infinite while loop
while : ; do
	sleep 1

	### Check and wait USB serial character device file exists
	while [ ! -c $SerialPort ] ; do
		sleep 1 # wait 1sec
		[ $USB_SERIAL_DEV_EXIST -ne 0 ] && {
			echo "dwsbLCD: Check inserted the USB serial LCD!" > /dev/kmsg
			USB_SERIAL_DEV_EXIST=0
		}
	done

	if [ $USB_SERIAL_DEV_EXIST -eq 0 ] ; then
		USB_SERIAL_DEV_EXIST=1
		#sleep 1 # wait 1sec
		### Check CFA LCD
		## Ping LCD
		cfa_send $SerialPort "\x00\d000" 1>&3 2>&4
		if [ $? -eq 0 ] ; then
			CFA_DETECTED=1
			echo "dwsbLCD: Detected CFA LCD!" > /dev/kmsg
		else
			CFA_DETECTED=0
			echo "dwsbLCD: Detected legacy LCD!" > /dev/kmsg
		fi

		# Init LCD
		if [ $CFA_DETECTED -eq 1 ] ; then
			cfaLCDInit
		else
			legacyLCDInit
		fi
	fi

	readLines
	###

	if [ $CFA_DETECTED -eq 1 ] ; then
		### Locate 0,0
		cfa_send $SerialPort "\x1f\d022\d000\d000$line_1" 1>&3 2>&4
		### Locate 0,1
		cfa_send $SerialPort "\x1f\d022\d000\d001$line_2" 1>&3 2>&4
		### Locate 0,2
		cfa_send $SerialPort "\x1f\d022\d000\d002$line_3" 1>&3 2>&4
		### Locate 0,3
		cfa_send $SerialPort "\x1f\d022\d000\d003$line_4" 1>&3 2>&4
	else
		### Locate 0,0
		serial_send $SerialPort "\x1B\x4C\x00\x00$line_1" 1>&3 2>&4
		### Locate 0,1
		serial_send $SerialPort "\x1B\x4C\x00\x01$line_2" 1>&3 2>&4
		### Locate 0,2
		serial_send $SerialPort "\x1B\x4C\x00\x02$line_3" 1>&3 2>&4
		### Locate 0,3
		serial_send $SerialPort "\x1B\x4C\x00\x03$line_4" 1>&3 2>&4
	fi
done

### END of Main script ###
