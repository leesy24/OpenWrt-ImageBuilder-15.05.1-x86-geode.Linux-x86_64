#!/bin/sh
#
#####################################################################
##
##      DWSB LCD_Mon for Chaos Calmer 15.05.1 @linux3.18
##
##            Copyright 2020, by Dasan InfoTek Co.,
##
##                         ...leesy...
##
#####################################################################

# set to null output stderr|stdout redirection
exec 3>&1
exec 4>&2
exec 1>/dev/null
exec 2>/dev/null

#-----------------------------#
### Load dual station roaming configurations from file
[ -e /etc/dwsb/dual_sta_roaming.cfg ] && {
	cp /etc/dwsb/dual_sta_roaming.cfg /tmp/dual_sta_roaming.cfg
	. /tmp/dual_sta_roaming.cfg
}
USE_DUALSTAROAM_MODE=$_USE_DUALSTAROAM_MODE
#-----------------------------#

iface_index_1st=0
iface_index_2nd=1
SerialPort=/dev/ttyUSB0
#SendErrorPipe="2> /dev/null"
SendErrorPipe=">/dev/kmsg 2>/dev/null"
#SendErrorPipe="1>&3 2>&4"

# $1 = phy index
# $2 = channel number
getFrequencyGHz() {
	local phy_index=$1
	local chan=$2

	[ ! -f /tmp/iw_info_phy$phy_index ] && iw phy$phy_index info 2>/dev/null > /tmp/iw_info_phy$phy_index

	grep -E -m1 "(\* ${chan:-....} MHz${chan:+|\\[$chan\\]})" /tmp/iw_info_phy$phy_index | \
		grep "MHz" | \
		awk '{print $2}' | \
		sed -e "s/\([0-9]\)\([0-9]*\)/\1\.\2/"
}

readLines() {
	#local host=$(uci -q get system.@system[0].hostname)
	local host=$(cat /proc/sys/kernel/hostname)
	#local ip=$(ip -4 addr show br-lan | sed -Ene 's/^.*inet ([0-9.]+)\/.*$/\1/p')
	#local ip=$(ifconfig br-lan 2> /dev/null | grep "inet addr" | awk '{print $2}' | cut -d":" -f2)
	#[ -z "$ip" ] && 
	local ip=$(uci -q get network.lan.ipaddr)

	local fstDisabled=$(uci -q get wireless.@wifi-iface[$iface_index_1st].disabled)
	local fstWds=$(uci -q get wireless.@wifi-iface[$iface_index_1st].wds)
	local fstImode=$(uci -q get wireless.@wifi-iface[$iface_index_1st].mode)
	local fstMode
	local fstSsid
	local fstCh
	local fstFreq
	local fstSNR
	local fstCnt
	local fstAP
	if [ "$fstDisabled" = "1" ]; then
		fstMode="Disabled"
	else
		iwinfo wlan$iface_index_1st info 2>/dev/null > /tmp/iwinfo_info_wlan$iface_index_1st
		fstSsid=$(uci -q get wireless.@wifi-iface[$iface_index_1st].ssid)
		# limit 4 chars
		fstSsid=$(echo "$fstSsid    " | head -c4)
		fstCh=$(grep "Channel" /tmp/iwinfo_info_wlan$iface_index_1st | awk '{print $4}')
		([ -z "$fstCh" ] || [ "$fstCh" = "unknown" ]) && fstCh=$(uci -q get wireless.radio0.channel)
		if [ "$fstCh" = "auto" ]; then
			fstFreq="Auto"
		else
			fstFreq=$(getFrequencyGHz $iface_index_1st $fstCh)
		fi
		# limit 5 chars
		fstFreq=$(echo "$fstFreq     " | head -c5)
		fstSNR=$(grep "Link" /tmp/iwinfo_info_wlan$iface_index_1st | awk '{print $6}' | cut -d'/' -f1)
		([ -z "$fstSNR" ] || [ "$fstSNR" = "unknown" ]) && fstSNR=0
		if [ "$fstImode" = "ap" ]; then 
			[ "$fstWds" = "1" ] && fstMode="APW" || fstMode="AP"
			fstCnt=$(iwinfo wlan$iface_index_1st assoclist 2>/dev/null | grep -cE "^([0-9A-F]{2}:){5}[0-9A-F]{2}")
			[ -z "$fstCnt" ] && fstCnt=0
		elif [ "$fstImode" = "sta" ]; then
			[ "$fstWds" = "1" ] && fstMode="STW" || fstMode="ST"
			fstAP=$(grep "Access" /tmp/iwinfo_info_wlan$iface_index_1st | awk '{print $3}')
			([ -z "$fstAP" ] || [ "$fstAP" = "00:00:00:00:00:00" ]) && {
				fstAP="NotAss"
			} || {
				# cut 15 chars
				fstAP=$(echo $fstAP | cut -c16-)
			}
		else
			fstMode=$fstImode
		fi
		# limit 3 chars
		fstMode=$(echo "$fstMode   " | head -c3)
	fi

	local sndDisabled=$(uci -q get wireless.@wifi-iface[$iface_index_2nd].disabled)
	local sndWds=$(uci -q get wireless.@wifi-iface[$iface_index_2nd].wds)
	local sndImode=$(uci -q get wireless.@wifi-iface[$iface_index_2nd].mode)
	local sndMode
	local sndSsid
	local sndCh
	local sndFreq
	local sndSNR
	local sndCnt
	local sndAP
	if [ "$sndDisabled" = "1" ]; then
		sndMode="Disabled"
	else
		iwinfo wlan$iface_index_2nd info 2>/dev/null > /tmp/iwinfo_info_wlan$iface_index_2nd
		sndSsid=$(uci -q get wireless.@wifi-iface[$iface_index_2nd].ssid)
		# limit 4 chars
		sndSsid=$(echo "$sndSsid    " | head -c4)
		sndCh=$(grep "Channel" /tmp/iwinfo_info_wlan$iface_index_2nd | awk '{print $4}')
		([ -z "$sndCh" ] || [ "$sndCh" = "unknown" ]) && sndCh=$(uci -q get wireless.radio1.channel)
		if [ "$sndCh" = "auto" ]; then
			sndFreq="Auto"
		else
			sndFreq=$(getFrequencyGHz $iface_index_2nd $sndCh)
		fi
		# limit 5 chars
		sndFreq=$(echo "$sndFreq     " | head -c5)
		sndSNR=$(grep "Link" /tmp/iwinfo_info_wlan$iface_index_2nd | awk '{print $6}' | cut -d'/' -f1)
		([ -z "$sndSNR" ] || [ "$sndSNR" = "unknown" ]) && sndSNR=0
		if [ "$sndImode" = "ap" ]; then
			[ "$sndWds" = "1" ] && sndMode="APW" || sndMode="AP"
			sndCnt=$(iwinfo wlan$iface_index_2nd assoclist 2>/dev/null | grep -cE "^([0-9A-F]{2}:){5}[0-9A-F]{2}")
			[ -z "$sndCnt" ] && sndCnt=0
		elif [ "$sndImode" = "sta" ]; then
			[ "$sndWds" = "1" ] && sndMode="STW" || sndMode="ST"
			sndAP=$(grep "Access" /tmp/iwinfo_info_wlan$iface_index_2nd | awk '{print $3}')
			if ([ -z "$sndAP" ] || [ "$sndAP" = "00:00:00:00:00:00" ]); then
				sndAP="NotAss"
			else
				# cut 15 chars
				sndAP=$(echo $sndAP | cut -c16-)
			fi
		else
			sndMode=$sndImode
		fi
		# limit 3 chars
		sndMode=$(echo "$sndMode   " | head -c3)
	fi

	local upTime=$(uptime | cut -c2- | cut -d',' -f1)

	## Check Dual Station mode
	local fstBridged=0
	local sndBridged=0
	if ([ "$USE_DUALSTAROAM_MODE" = "Y" ] && [ "$fstImode" = "sta" ] && [ "$sndImode" = "sta" ]); then
		## Get active bridge network info
		brctl show 2>/dev/null > /tmp/brctl_show
		## Get first network active on bridge
		fstBridged=$(grep -c "wlan0" /tmp/brctl_show)
		## Get second network active on bridge
		sndBridged=$(grep -c "wlan1" /tmp/brctl_show)
	fi

	# make line 1 string
	line_1=$(echo "$host $ip                    " | cut -c -20)
	# make line 2 string
	[ "$fstDisabled" = "1" ] && {
		line_2="$fstMode"
	} || {
		[ "$fstImode" = "ap" ] && {
			line_2="$fstMode $fstSsid $fstFreq $fstSNR $fstCnt"
		} || {
			### in case STA
			[ "$fstAP" = "NotAss" ] && {
				[ $fstBridged -eq 1 ] && {
					line_2="$fstMode<$fstSsid $fstFreq $fstAP"
				} || {
					line_2="$fstMode $fstSsid $fstFreq $fstAP"
				}
			} || {
				[ $fstBridged -eq 1 ] && {
					line_2="$fstMode<$fstSsid $fstFreq $fstSNR $fstAP"
				} || {
					line_2="$fstMode $fstSsid $fstFreq $fstSNR $fstAP"
				}
			}
		}
	}
	line_2=$(echo "$line_2                    " | cut -c -20)
	# make line 3 string
	[ "$sndDisabled" = "1" ] && {
		line_3="$sndMode"
	} || {
		[ "$sndImode" = "ap" ] && {
			line_3="$sndMode $sndSsid $sndFreq $sndSNR $sndCnt"
		} || {
			### in case STA
			[ "$sndAP" = "NotAss" ] && {
				[ $sndBridged -eq 1 ] && {
					line_3="$sndMode<$sndSsid $sndFreq $sndAP"
				} || {
					line_3="$sndMode $sndSsid $sndFreq $sndAP"
				}
			} || {
				[ $sndBridged -eq 1 ] && {
					line_3="$sndMode<$sndSsid $sndFreq $sndSNR $sndAP"
				} || {
					line_3="$sndMode $sndSsid $sndFreq $sndSNR $sndAP"
				}
			}
		}
	}
	line_3=$(echo "$line_3                    " | cut -c -20)
	# make line 4 string
	line_4=$(echo "$upTime                    " | cut -c -20)
}

legacyLCDInit() {
	serial_send $SerialPort "\x1B\x43" $SendErrorPipe
	## Display splash strings
	serial_send $SerialPort "\x1B\x4C\x00\x00DASAN InfoTek       " $SendErrorPipe
	serial_send $SerialPort "\x1B\x4C\x00\x01 Model:DWSB         " $SendErrorPipe
	serial_send $SerialPort "\x1B\x4C\x00\x02                    " $SendErrorPipe
	serial_send $SerialPort "\x1B\x4C\x00\x03     www.dsintek.com" $SendErrorPipe
}

cfaLCDInit() {
	### Init CFA LCD
	## Set keypad backlight off
	cfa_send $SerialPort "\x0e\d002\d100\d000" $SendErrorPipe
	## Display splash strings
	cfa_send $SerialPort "\x1f\d022\d000\d000DASAN InfoTek       " $SendErrorPipe
	cfa_send $SerialPort "\x1f\d022\d000\d001 Model:DWSB         " $SendErrorPipe
	cfa_send $SerialPort "\x1f\d022\d000\d002                    " $SendErrorPipe
	cfa_send $SerialPort "\x1f\d022\d000\d003     www.dsintek.com" $SendErrorPipe
	## Store current state as boot state
	cfa_send $SerialPort "\x04\d000" $SendErrorPipe
}

### Start of main script

### Check and wait USB serial character device file exists
USB_SERIAL_DEV_EXIST=-1
while [ ! -c $SerialPort ] ; do
	sleep 1 # wait 1sec
	[ $USB_SERIAL_DEV_EXIST -ne 0 ] && {
		echo "dwsbLCD: Check inserted the USB serial LCD!" > /dev/kmsg
		USB_SERIAL_DEV_EXIST=0
	}
done
USB_SERIAL_DEV_EXIST=1
#sleep 1 # wait 1sec

### Check CFA LCD
## Ping LCD
cfa_send $SerialPort "\x00\d000" $SendErrorPipe
if [ $? -eq 0 ] ; then
	CFA_DETECTED=1
	echo "dwsbLCD: Detected CFA LCD!" > /dev/kmsg
else
	CFA_DETECTED=0
	echo "dwsbLCD: Detected legacy LCD!" > /dev/kmsg
fi

# Init LCD
if [ $CFA_DETECTED -eq 1 ] ; then
	cfaLCDInit
else
	legacyLCDInit
fi

# infinite while loop
while : ; do
	sleep 1

	### Check and wait USB serial character device file exists
	while [ ! -c $SerialPort ] ; do
		sleep 1 # wait 1sec
		[ $USB_SERIAL_DEV_EXIST -ne 0 ] && {
			echo "dwsbLCD: Check inserted the USB serial LCD!" > /dev/kmsg
			USB_SERIAL_DEV_EXIST=0
		}
	done

	if [ $USB_SERIAL_DEV_EXIST -eq 0 ] ; then
		USB_SERIAL_DEV_EXIST=1
		#sleep 1 # wait 1sec
		### Check CFA LCD
		## Ping LCD
		cfa_send $SerialPort "\x00\d000" $SendErrorPipe
		if [ $? -eq 0 ] ; then
			CFA_DETECTED=1
			echo "dwsbLCD: Detected CFA LCD!" > /dev/kmsg
		else
			CFA_DETECTED=0
			echo "dwsbLCD: Detected legacy LCD!" > /dev/kmsg
		fi

		# Init LCD
		if [ $CFA_DETECTED -eq 1 ] ; then
			cfaLCDInit
		else
			legacyLCDInit
		fi
	fi

	readLines
	###

	if [ $CFA_DETECTED -eq 1 ] ; then
		### Locate 0,0
		cfa_send $SerialPort "\x1f\d022\d000\d000$line_1" $SendErrorPipe
		### Locate 0,1
		cfa_send $SerialPort "\x1f\d022\d000\d001$line_2" $SendErrorPipe
		### Locate 0,2
		cfa_send $SerialPort "\x1f\d022\d000\d002$line_3" $SendErrorPipe
		### Locate 0,3
		cfa_send $SerialPort "\x1f\d022\d000\d003$line_4" $SendErrorPipe
	else
		### Locate 0,0
		serial_send $SerialPort "\x1B\x4C\x00\x00$line_1" $SendErrorPipe
		### Locate 0,1
		serial_send $SerialPort "\x1B\x4C\x00\x01$line_2" $SendErrorPipe
		### Locate 0,2
		serial_send $SerialPort "\x1B\x4C\x00\x02$line_3" $SendErrorPipe
		### Locate 0,3
		serial_send $SerialPort "\x1B\x4C\x00\x03$line_4" $SendErrorPipe
	fi
done

### END of Main script ###
