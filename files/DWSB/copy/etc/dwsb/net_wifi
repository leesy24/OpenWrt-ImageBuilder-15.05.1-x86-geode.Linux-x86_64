#!/bin/sh
# (C) 2020 DASAN InfoTek,
#           leesy@DSI
##
. common

cWiFiIndex=$1
[ "$cWiFiIndex" = "0" ] && cWiFiIndexStr="First"
[ "$cWiFiIndex" = "1" ] && cWiFiIndexStr="Second"
[ "$cWiFiIndex" != "0" ] && [ "$cWiFiIndex" != "1" ] && cWiFiIndexStr="Unknown"

Freq24TBL="\
auto\n\
2.4G = 2.412(1) 2.417(2) 2.422(3) 2.427(4) 2.432(5) 2.437(6) 2.442(7)\n\
       2.447(8) 2.452(9) 2.457(10) 2.462(11) 2.467(12) 2.472(13)\n"

Freq5TBL="\
auto\n\
5.xG = 5.180(36) 5.200(40) 5.220(44) 5.240(48)\n\
       5.745(149) 5.765(153) 5.785(157) 5.805(161)"

while : ; do

	readSystem
	readNetwork
	readWifi $cWiFiIndex

	inputvar=""

	if [ "$cWdisabled" = "1" ] ; then
		menuinput "$cWiFiIndexStr WiFi Configure" \
			'"1WiFi_Mode"   "WiFi disable/AP/ST/WDS __________($cWmode)"'
	elif [ "$cWencr" = "none" ] ; then
		menuinput "$cWiFiIndexStr WiFi Configure" \
			'"1WiFi_Mode"   "WiFi disable/AP/ST/WDS __________($cWmode)"
			"2WiFi_Band"    "WiFi Band _______________________($cWband GHz)"
			"3WiFi_Freq"    "WiFi Freq _______________________($cWfreq)"
			"4WiFi_eSSID"   "WiFi eSSID/Wireless-Name ________($cWssid)"
			"5WiFi_InLimit" "WiFi Station inactivity limit ___($cWinlimit sec(s))"
			"6WiFi_EncUSE"  "WiFi Encription [none/wep/psk2] _($cWencr)"
			"X_ExitCancel"  "Exit or Cancel to upper Menu"'
	else
		menuinput "$cWiFiIndexStr WiFi Configure" \
			'"1WiFi_Mode"   "WiFi disable/AP/ST/WDS __________($cWmode)"
			"2WiFi_Band"    "WiFi Band _______________________($cWband GHz)"
			"3WiFi_Freq"    "WiFi Freq _______________________($cWfreq)"
			"4WiFi_eSSID"   "WiFi eSSID/Wireless-Name ________($cWssid)"
			"5WiFi_InLimit" "WiFi Station inactivity limit ___($cWinlimit sec(s))"
			"6WiFi_EncUSE"  "WiFi Encription [none/wep/psk2] _($cWencr)"
			"7WiFi_EncKEY"  "WiFi Encription [Key Code] ______($cWkey)"
			"X_ExitCancel"  "Exit or Cancel to upper Menu"'
	fi

	case $inputvar in

	1WiFi_Mode)
		inputvar=$cWmode
		errormsg=""
		while :; do
			textinput \
				 "Please enter WiFi Mode [Disable/AP/APW/ST/STW]\n\n"$(
				)"Examples:\n"$(
	 			)" ex1)Disable  ex2)AP  ex3)APW - AP with WDS\n"$(
	 			)" ex4)ST  ex5)STW - Station with WDS\n"$(
				)"\n$errormsg\n" \
				"$inputvar"
			retval=$?
			# Check return error
			[ $retval -ne 0 ] && break
			# Check changed
			[ "$inputvar" = "$cWmode" ] && break
			# Check input string is one of WiFi Mode
			if [ "$inputvar" = "Disable" ] ; then
				uci set wireless.@wifi-iface[$cWiFiIndex].disabled="1"
				break
			elif [ "$inputvar" = "AP" ] ; then
				uci -q delete wireless.@wifi-iface[$cWiFiIndex].disabled
				uci -q delete wireless.@wifi-iface[$cWiFiIndex].wds
				uci set wireless.@wifi-iface[$cWiFiIndex].mode="ap"
				break
			elif [ "$inputvar" = "APW" ] ; then
				uci -q delete wireless.@wifi-iface[$cWiFiIndex].disabled
				uci set wireless.@wifi-iface[$cWiFiIndex].wds="1"
				uci set wireless.@wifi-iface[$cWiFiIndex].mode="ap"
				break
			elif [ "$inputvar" = "ST" ] ; then
				uci -q delete wireless.@wifi-iface[$cWiFiIndex].disabled
				uci -q delete wireless.@wifi-iface[$cWiFiIndex].wds
				uci set wireless.@wifi-iface[$cWiFiIndex].mode="sta"
				break
			elif [ "$inputvar" = "STW" ] ; then
				uci -q delete wireless.@wifi-iface[$cWiFiIndex].disabled
				uci set wireless.@wifi-iface[$cWiFiIndex].wds="1"
				uci set wireless.@wifi-iface[$cWiFiIndex].mode="sta"
				break
			fi
			errormsg="Check input value is WiFi mode!"
		done
		;;

	2WiFi_Band)
		inputvar=$cWband
		errormsg=""
		while :; do
			textinput \
				 "Please enter WiFi Band [2.4/5]GHz\n\n"$(
				)"Examples:\n"$(
	 			)" ex1)2.4  ex2)5\n"$(
				)"\n$errormsg\n" \
				"$inputvar"
			retval=$?
			# Check return error
			[ $retval -ne 0 ] && break
			# Check changed
			[ "$inputvar" = "$cWband" ] && break
			# Check input string is one of WiFi Mode
			if [ "$inputvar" = "2.4" ] ; then
				uci set wireless.radio$cWiFiIndex.hwmode="11g"
				uci set wireless.radio$cWiFiIndex.channel="auto"
				break
			elif [ "$inputvar" = "5" ] ; then
				uci set wireless.radio$cWiFiIndex.hwmode="11a"
				uci set wireless.radio$cWiFiIndex.channel="auto"
				break
			fi
			errormsg="Check input value is WiFi Band!"
		done
		;;

	3WiFi_Freq)
		[ "$cWband" = "2.4" ] && FreqTBL=$Freq24TBL || FreqTBL=$Freq5TBL
		inputvar=$cWfreq
		errormsg=""
		while :; do
			textinput \
				 "Please enter Running-Frequency... with N.NNN GHz\n\n"$(
				)"Examples:\n"$(
				)"$FreqTBL\n"$(
				)"\n$errormsg\n" \
				"$inputvar"
			retval=$?
			# Check return error
			[ $retval -ne 0 ] && break
			# Check changed
			[ "$inputvar" = "$cWfreq" ] && break
			# Check one of FreqTBL
			[ -n "$inputvar" ] && [ "$inputvar" = "auto" ] && {
                uci set wireless.radio$cWiFiIndex.channel="$inputvar"
                break
            }
			[ -n "$inputvar" ] && [ "$inputvar" = "$(echo "$FreqTBL" | grep -o -E -m1 "( $inputvar\([0-9]*\))" | cut -d' ' -f2 | cut -d'(' -f1)" ] && {
				uci set wireless.radio$cWiFiIndex.channel="$(echo "$FreqTBL" | grep -o -E -m1 "($inputvar\([0-9]*\))" | cut -d'(' -f2 | cut -d')' -f1)"
				break
			}
			errormsg="Check input one of Freq table"
		done
		;;

	4WiFi_eSSID)
		inputvar=$cWssid
		errormsg=""
		while :; do
			textinput \
				 "Please enter AP SSID/Name ...\n\n"$(
				)"Examples:\n"$(
	 			)" ex1)AP01  ex2)APnn\n"$(
				)"\n$errormsg\n" \
				"$inputvar"
			retval=$?
			# Check return error
			[ $retval -ne 0 ] && break
			# Check changed
			[ "$inputvar" = "$cWssid" ] && break
			# Check input string is not null
			if [ -n "$inputvar" ] ; then
				uci set wireless.@wifi-iface[$cWiFiIndex].ssid="$inputvar"
				break
			fi
			errormsg="Check input value is SSID!"
		done
		;;

	5WiFi_InLimit)
		inputvar=$cWinlimit
		errormsg=""
		while :; do
			textinput \
				"Please enter Station inactivity limit in seconds(> 0)\n\n"$(
				)"Examples:\n"$(
				)" 10  20  30  40  50\n"$(
				)"\n$errormsg\n" \
				"$inputvar"
			retval=$?
			# Check return error
			[ $retval -ne 0 ] && break
			# Check changed
			[ "$inputvar" = "$cWinlimit" ] && break
			# Check string greater than zero
			[ $inputvar -gt 0 ] 2>/dev/null && {
				uci set wireless.@wifi-iface[$cWiFiIndex].max_inactivity="$inputvar"
				break
			}
			errormsg="Check input value is greater than 0!"
		done
		;;

	6WiFi_EncUSE)
		inputvar=$cWencr
		errormsg=""
		while :; do
			textinput \
				 "Please enter WiFi Encription Type [none/wep/psk2]\n\n"$(
				)"Examples:\n"$(
	 			)" ex1)none  ex2)wep-open  ex3)psk2+ccmp\n"$(
				)"\n$errormsg\n" \
				"$inputvar"
			retval=$?
			# Check return error
			[ $retval -ne 0 ] && break
			# Check changed
			[ "$inputvar" = "$cWencr" ] && break
			# Check encryption types
			if [ "$inputvar" = "psk2+ccmp" ] ; then
				uci set wireless.@wifi-iface[$cWiFiIndex].encryption="psk2+ccmp"
				break
			elif [ "$inputvar" = "wep-open" ] ; then
				uci set wireless.@wifi-iface[$cWiFiIndex].encryption="wep-open"
				break
			elif [ -z "$inputvar" ] || [ "$inputvar" = "none" ] ; then
				uci set wireless.@wifi-iface[$cWiFiIndex].encryption="none"
				break
			fi
			errormsg="Check input value is one of encryption type!"
		done
		;;

	7WiFi_EncKEY)
		inputvar=$cWkey
		errormsg=""
		while :; do
			if [ "$cWencr" = "psk2+ccmp" ] ; then
				textinput \
					 "Please enter Wireless LAN Encription-Key-Code...\n\n"$(
					)"Examples: must input more and equal than 8 chars\n"$(
	 				)" ex1)12345678  ex2)1234567890123\n"$(
					)"\n$errormsg\n" \
					"$inputvar"
				retval=$?
				# Check return error
				[ $retval -ne 0 ] && break
				# Check changed
				[ "$inputvar" = "$cWencr" ] && break
				# Check input string is not null
				if [ -n "$inputvar" ] ; then
					uci set wireless.@wifi-iface[$cWiFiIndex].key="$inputvar"
					break
				fi
			else # elif [ "$cWencr" = "wep-open" ] ; then
				textinput \
					 "Please enter Wireless LAN Encription-Key-Code...\n\n"$(
					)"Examples: must input 5 chars or 13 chars\n"$(
	 				)" ex1)12345 ex2)1234567890123 ex3)string13chars\n"$(
					)"\n$errormsg\n" \
					"$inputvar"
				retval=$?
				# Check return error
				[ $retval -ne 0 ] && break
				# Check changed
				[ "$inputvar" = "$cWencr" ] && break
				# Check input string is not null
				if [ -n "$inputvar" ] && ([ ${#inputvar} -eq 5 ] || [ ${#inputvar} -eq 13 ])  ; then
					uci set wireless.@wifi-iface[$cWiFiIndex].key="1"
					uci set wireless.@wifi-iface[$cWiFiIndex].key1="s:$inputvar"
					break
				fi
			fi
			errormsg="Check input key code and size is 5 or 13!"
		done
		;;

	timeout)
		;;

	X_ExitCancel | *)
		rm $tempfile >/dev/null 2>/dev/null
		exit 0
		;;

	esac
done
