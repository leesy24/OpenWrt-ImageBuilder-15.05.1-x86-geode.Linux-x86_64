#!/bin/sh
# (C) 2020 DASAN InfoTek,
#           leesy@DSI
##

phy_ap="phy0"
phy_st="phy1"

iface_ap="wlan0"
iface_st="wlan1"

readModelName() {
	ModelName=$(uci -q get system.@system[0].hostname)
}

readCFG() {
	iw $phy_ap info > /tmp/iw_info_$phy_ap
	iw $phy_st info > /tmp/iw_info_$phy_st

	iwinfo $iface_ap info 2> /dev/null > /tmp/iw_info_$iface_ap
	iwinfo $iface_ap assoclist 2> /dev/null > /tmp/iw_assoclist_$iface_ap
	iwinfo $iface_st info 2> /dev/null > /tmp/iw_info_$iface_st

	## echo "wSSID=$cWssid $cWencr Key=$cWkey $cWip $cWmask $cWgway $cLip $cLmask $cSlogip $cWdns "

	apHWMODE=$(grep "HW Mode" /tmp/iw_info_$iface_ap | awk '{print $5}')
	apSSID=$(uci -q get wireless.@wifi-iface[0].ssid)
	apCh=$(uci -q get wireless.radio0.channel)
	[ "$apCh" = "auto" ] && {
		apCh=$(grep Channel /tmp/iw_info_$iface_ap | awk '{print $4}')
	}
	[ "$apCh" = "unknown" ] && {
		apFreq="Auto "
	} || {
		apFreq=$(grep -E -m1 "(\* .... MHz \[$apCh\])" /tmp/iw_info_$phy_ap | \
			awk '{print $2}' | \
			sed -e "s/\([0-9]\)\([0-9]*\)/\1\.\2/")
	}
	apSNR=$(grep Link /tmp/iw_info_$iface_ap | awk '{print $6}' | cut -d'/' -f1)
	([ -z "$apSNR" ] || [ "$apSNR" = "unknown" ]) && apSNR=0
	apCnt=$(grep -cE '^([0-9A-F]{2}:){5}[0-9A-F]{2}' /tmp/iw_assoclist_$iface_ap)

	stHWMODE=$(grep "HW Mode" /tmp/iw_info_$iface_st | awk '{print $5}')
	stSSID=$(uci -q get wireless.@wifi-iface[1].ssid)
	stCh=$(uci -q get wireless.radio1.channel)
	[ "$stCh" = "auto" ] && {
		stCh=$(grep Channel /tmp/iw_info_$iface_st | awk '{print $4}')
	}
	[ "$stCh" = "unknown" ] && {
		stFreq="Auto "
	} || {
		stFreq=$(grep -E -m1 "(\* .... MHz \[$stCh\])" /tmp/iw_info_$phy_st | \
			awk '{print $2}' | \
			sed -e "s/\([0-9]\)\([0-9]*\)/\1\.\2/")
	}
	stSNR=$(grep Link /tmp/iw_info_$iface_st | awk '{print $6}' | cut -d'/' -f1)
	([ -z "$stSNR" ] || [ "$stSNR" = "unknown" ]) && stSNR=0
	stAP=$(grep Access /tmp/iw_info_$iface_st | awk '{ print $3 }')
	([ -z "$stAP" ] || [ "$stAP" = "00:00:00:00:00:00" ]) && stAP="Not-Associated"
}

readAPWLAN() {
        cWch=$(uci -q get wireless.radio0.channel)
        [ "$cWch" != "auto" ] && {
                cWfreq=$(iw phy0 info | \
                        grep -E -m1 "(\* .... MHz \[$cWch\])" | \
                        awk '{print $2}' | \
                        sed -e "s/\([0-9]\)\([0-9]*\)/\1\.\2/")
        } || {
                cWfreq=$cWch
        }
	#cWfreq=$(uci -q get wireless.radio0.channel)
	cWssid=$(uci -q get wireless.@wifi-iface[0].ssid)
	cWencr=$(uci -q get wireless.@wifi-iface[0].encryption)
	if [ "$cWencr" = "psk2+ccmp" ] ; then        
		cWkey=$(uci -q get wireless.@wifi-iface[0].key)
	else
		cWkey=$(uci -q get wireless.@wifi-iface[0].key1 | cut -c3-)
	fi
}

readSTWLAN() {
        cWch=$(uci -q get wireless.radio1.channel)
        [ "$cWch" != "auto" ] && {
                cWfreq=$(iw phy1 info | \
                        grep -E -m1 "(\* .... MHz \[$cWch\])" | \
                        awk '{print $2}' | \
                        sed -e "s/\([0-9]\)\([0-9]*\)/\1\.\2/")
        } || {
                cWfreq=$cWch
        }
	#cWfreq=$(uci -q get wireless.radio1.channel)
	cWssid=$(uci -q get wireless.@wifi-iface[1].ssid)
	cWencr=$(uci -q get wireless.@wifi-iface[1].encryption)
	if [ "$cWencr" = "psk2+ccmp" ] ; then        
		cWkey=$(uci -q get wireless.@wifi-iface[1].key)
	else
		cWkey=$(uci -q get wireless.@wifi-iface[1].key1 | cut -c3-)
	fi
}

readNET() {
	cHostName=$(uci -q get system.@system[0].hostname)

	cLip=$(uci -q get network.lan.ipaddr)
	cLmask=$(uci -q get network.lan.netmask)
}

readDATE() {
	rDATE=$(date +%Y%m%e)
	upTime=$(uptime | cut -d',' -f1)
	rDATE="$rDATE $upTime"
}

# $1 = frequency in MHz
getChannel() {
	iw phy0 info | \
		grep -E -m1 "(\* $1 MHz \[[0-9]*\])" | \
		cut -d'[' -f2 | cut -d']' -f1
}

# $1 = IPv4 string to validate
isValidIPv4() {
	local OLDIFS=$IFS
	if expr "$1" : '[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*$' >/dev/null; then
		IFS=.
		set $1
		for quad in 1 2 3 4; do
			if eval [ \$$quad -gt 255 ]; then
				IFS=$OLDIFS
				return 1
			fi
		done
		IFS=$OLDIFS
		return 0
	fi
	IFS=$OLDIFS
	return 1
}
