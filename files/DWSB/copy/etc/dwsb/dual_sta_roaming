#!/bin/sh
# (C) 2020 DASAN InfoTek
#           leesy@DSI
##
. common

local save_default_item=$default_item
default_item=""

CONFIG_org="/etc/dwsb/dual_sta_roaming.cfg"
CONFIG_tmp="/tmp/dual_sta_roaming.cfg"

# $1 = variable
# $2 = value
save_value() {
	egrep -v '^$' $CONFIG_tmp | egrep -v "^"$1 > $CONFIG_tmp.new
	echo $1"=\"$2\"" >> $CONFIG_tmp.new
	echo >> $CONFIG_tmp.new
	rm -f $CONFIG_tmp
	mv $CONFIG_tmp.new $CONFIG_tmp
}

### start of script

# make temp. config file for updating config file, if temp. config file is not exists.
[ ! -f $CONFIG_tmp ] && cp $CONFIG_org $CONFIG_tmp

while : ; do

	CUR_USE_DUALSTAROAM_MODE=$(grep "_USE_DUALSTAROAM_MODE" $CONFIG_tmp | sed 's/.*="\(.*\)"/\1/')
	CUR_SNRmin=$(grep "_SNRmin" $CONFIG_tmp | sed 's/.*="\(.*\)"/\1/')
	CUR_SNRdelta=$(grep "_SNRdelta" $CONFIG_tmp | sed 's/.*="\(.*\)"/\1/')
	CUR_PingIP1=$(grep "_PingIP1" $CONFIG_tmp | sed 's/.*="\(.*\)"/\1/')
	CUR_PingIP2=$(grep "_PingIP2" $CONFIG_tmp | sed 's/.*="\(.*\)"/\1/')
	CUR_PingTO=$(grep "_PingTO" $CONFIG_tmp | sed 's/.*="\(.*\)"/\1/')
	CUR_PingFC=$(grep "_PingFC" $CONFIG_tmp | sed 's/.*="\(.*\)"/\1/')

	### echo "($CUR_USE_DUALSTAROAM_MODE) ($CUR_SNRmin) ($CUR_SNRdelta) ($CUR_PingIP1) ($CUR_PingIP2) ($CUR_PingTO) ($CUR_PingFC)"

	inputvar=""

	if [ "$CUR_USE_DUALSTAROAM_MODE" != "Y" ] ; then
		menuinput  "Dual-Station Roaming Configure" \
			'"1_UseDualSta" "Configure to use Dual-Station Roaming mode ($CUR_USE_DUALSTAROAM_MODE)"
			"X_ExitCancel"  "Exit or Cancel to upper Menu"' \
			"$default_item"
	else
		menuinput  "Dual-Station Roaming Configure" \
			'"1_UseDualSta" "Configure to use Dual-Station Roaming mode ($CUR_USE_DUALSTAROAM_MODE)"
			"2_SNRmin"      "Configure Minimum SNR for Roaming ($CUR_SNRmin)"
			"3_SNRdelta"    "Configure Delta SNR for Roaming ($CUR_SNRdelta)"
			"4_PingIP1"     "Configure AP IP to ping for 1st STA ($CUR_PingIP1)"
			"5_PingIP2"     "Configure AP IP to ping for 2nd STA ($CUR_PingIP2)"
			"6_PingTO"      "Configure Time Out to ping AP IP ($CUR_PingTO)"
			"7_PingFC"      "Configure Fail Count to ping AP IP ($CUR_PingFC)"
			"8_TestRoaming" "Test Dual-Station Roaming!"
			"X_ExitCancel"  "Exit or Cancel to upper Menu"' \
			"$default_item"
	fi

	default_item=$inputvar

	case $inputvar in

	1_UseDualSta)
		inputvar=$CUR_USE_DUALSTAROAM_MODE
		errormsg=""
		while :; do
			textinput \
				"Please enter Y to use Dual-Station Roaming mode otherwise enter N or empty\n"$(
				)"Examples:\n"$(
				)" Y  N\n"$(
				)"\n\Z1$errormsg\Z0\n" \
				"$inputvar"
			retval=$?
			# Check return error
			[ $retval -ne 0 ] && break
			# Check changed
			[ "$inputvar" = "$CUR_USE_DUALSTAROAM_MODE" ] && break
			# Check string is null
			[ -z "$inputvar" ] && {
				save_value _USE_DUALSTAROAM_MODE "N"
				break
			}
			# Check string is Y or N
			([ "$inputvar" = "Y" ] || [ "$inputvar" = "N" ]) && {
				save_value _USE_DUALSTAROAM_MODE $inputvar
				break
			}
			errormsg="Check input value is Y or N or empty!"
		done
		;;

	2_SNRmin)
		inputvar=$CUR_SNRmin
		errormsg=""
		while :; do
			textinput \
				"Please enter minimum SNR for roaming in NN dBm(0 < NN < 70)\n"$(
				)"\n\Z1$errormsg\Z0\n" \
				"$inputvar"
			retval=$?
			# Check return error
			[ $retval -ne 0 ] && break
			# Check changed
			[ "$inputvar" = "$CUR_SNRmin" ] && break
			# Check 0 < value < 70
			[ -n "$inputvar" ] && [ $inputvar -gt 0 ] 2>/dev/null && [ $inputvar -lt 70 ] 2>/dev/null && {
				save_value _SNRmin $inputvar
				break
			}
			errormsg="Check input value NN is 0 < NN < 70"
		done
		;;

	3_SNRdelta)
		inputvar=$CUR_SNRdelta
		errormsg=""
		while :; do
			textinput \
				"Please enter delta SNR for roaming in NN dBm(0 <= NN <= 35)\n"$(
				)"\n\Z1$errormsg\Z0\n" \
				"$inputvar"
			retval=$?
			# Check return error
			[ $retval -ne 0 ] && break
			# Check changed
			[ "$inputvar" = "$CUR_SNRdelta" ] && break
			# Check 0 <= value <= 70
			[ -n "$inputvar" ] && [ $inputvar -ge 0 ] 2>/dev/null && [ $inputvar -le 35 ] 2>/dev/null && {
				save_value _SNRdelta $inputvar
				break
			}
			errormsg="Check input value NN is 0 <= NN <= 35"
		done
		;;

	4_PingIP1)
		inputvar=$CUR_PingIP1
		errormsg=""
		while :; do
			textinput \
				 "Please enter AP's IP to ping for 1st Station\n"$(
				)" Ping disabled when empty\n\n"$(
				)"Examples: can blank\n"$(
				)" 192.168.0.127  10.1.1.127\n"$(
				)"\n\Z1$errormsg\Z0\n" \
				"$inputvar"
			retval=$?
			# Check return error
			[ $retval -ne 0 ] && break
			# Check changed
			[ "$inputvar" = "$CUR_PingIP1" ] && break
			# Check string null or valid IP v4
			if [ -z "$inputvar" ] || isValidIPv4 "$inputvar"; then
				save_value _PingIP1 $inputvar
				break
			fi
			errormsg="Check input value is IP v4 format!"
		done
		;;

	5_PingIP2)
		inputvar=$CUR_PingIP2
		errormsg=""
		while :; do
			textinput \
				 "Please enter AP's IP to ping for 2nd Station\n"$(
				)" Ping disabled when empty\n\n"$(
				)"Examples: can blank\n"$(
				)" 192.168.0.127  10.1.1.127\n"$(
				)"\n\Z1$errormsg\Z0\n" \
				"$inputvar"
			retval=$?
			# Check return error
			[ $retval -ne 0 ] && break
			# Check changed
			[ "$inputvar" = "$CUR_PingIP2" ] && break
			# Check string null or valid IP v4
			if [ -z "$inputvar" ] || isValidIPv4 "$inputvar"; then
				save_value _PingIP2 $inputvar
				break
			fi
			errormsg="Check input value is IP v4 format!"
		done
		;;

	6_PingTO)
		inputvar=$CUR_PingTO
		errormsg=""
		while :; do
			textinput \
				"Please enter ping Time Out in milli-second(0 < TO <= 1000)\n\n"$(
				)"Examples:\n"$(
				)" 1  7  10  20\n"$(
				)"\n\Z1$errormsg\Z0\n" \
				"$inputvar"
			retval=$?
			# Check return error
			[ $retval -ne 0 ] && break
			# Check changed
			[ "$inputvar" = "$CUR_PingTO" ] && break
			# Check greater than zero
			([ $inputvar -gt 0 ] 2>/dev/null && [ $inputvar -le 1000 ] 2>/dev/null) && {
				save_value _PingTO $inputvar
				break
			}
			errormsg="Check input value is greater than 0 and little equal than 1000 !"
		done
		;;

	7_PingFC)
		inputvar=$CUR_PingFC
		errormsg=""
		while :; do
			textinput \
				"Please enter ping Fail Count(0 < FC <= 5) to run roaming\n"$(
				)" Ping disabled when zero or empty\n\n"$(
				)"Examples:\n"$(
				)" 1  2  3  4  5\n"$(
				)"\n\Z1$errormsg\Z0\n" \
				"$inputvar"
			retval=$?
			# Check return error
			[ $retval -ne 0 ] && break
			# Check changed
			[ "$inputvar" = "$CUR_PingFC" ] && break
			# Check string null or greater equal than zero and little equal than 5
			([ -z "$inputvar" ] || ([ $inputvar -ge 0 ] 2>/dev/null && [ $inputvar -le 5 ] 2>/dev/null)) && {
				save_value _PingFC $inputvar
				break
			}
			errormsg="Check input value is empty or greater equal than 0 and little equal than 5 !"
		done
		;;

	8_TestRoaming)
		local ACT_USE_DUALSTAROAM_MODE=$(grep "_USE_DUALSTAROAM_MODE" $CONFIG_org | sed 's/.*="\(.*\)"/\1/')
		if [ "$ACT_USE_DUALSTAROAM_MODE" != "Y" ]; then
			infobox \
				 "\Z1ERROR!\n"$(
				)"\Z0 Dual Station Roaming is not yet committed.\n"$(
				)" Please try again after COMMIT it." \
				5
		else
			inputvar="N"
			textinput \
				"Dual-Station Roaming TEST... Now?? [Yes/No]\n\n"$(
				)"Please Enter:\n"$(
				)" [Y]=Run Roaming/[N]=Exit\n" \
				"$inputvar"
			retval=$?
			# Check return error
			[ $retval -ne 0 ] && break
			[ "$inputvar" = "Y" ] && {
				clear
				echo ; echo "[$aHostname]... Roaming New Station Now!!"
				touch /tmp/.force_Dual_Sta_Roaming
				sleep 1 # sleep 1 second

				local TestRoamingTimer=0
				local TestRoamingTimeout=30 # 30secs
				while [ -e /tmp/.force_Dual_Sta_Roaming ] ; do
					sleep 1 # sleep 1 second
					TestRoamingTimer=$((TestRoamingTimer+1))
					[ $TestRoamingTimer -ge $TestRoamingTimeout ] && break
				done

				if [ -e /tmp/.force_Dual_Sta_Roaming ] ; then
					rm -f /tmp/.force_Dual_Sta_Roaming
					echo ; echo "[$aHostname]... Error! Roaming New Station!"
				else
					echo ; echo "[$aHostname]... Success! Roaming New Station."
				fi

				sleep 1 # sleep 1 second
			}
		fi
		;;

	X_ExitCancel | *)
		rm $tempfile >/dev/null 2>/dev/null
		default_item=$save_default_item
		exit 0
		;;
	esac
done
