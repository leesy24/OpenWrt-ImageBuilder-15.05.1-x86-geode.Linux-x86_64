#!/bin/sh
# (C) 2020 DASAN InfoTek,
#           leesy@DSI
##
DIALOG=${DIALOG=dialog}

tempfile="/tmp/main$$"
trap "rm -f $tempfile; exit" 0 1 2 5 15

. /etc/company_release

textinput() {
	$DIALOG \
		--ascii-lines --title "INPUT BOX" --clear \
		--inputbox "$1" 20 76 "$2" 2> $tempfile

	retval=$?

	case $retval in
	0)
		inputvar=$(cat $tempfile)
		;;
	1)
		inputvar=$2
		;;
	255)
		inputvar=$2
		;;
	esac

	if [ "$inputvar" = "--" ] ; then inputvar="" ; fi
}

menuinput() {

	readWifiAct

	menucmd=$(cat <<END    
$DIALOG --ascii-lines --clear --cr-wrap --timeout 60 \
	--title "[ $MODEL $NAME@$YEAR - $1 ]" \
	--menu "$3\
	Hostname:$cHostname IP:$cLip/$cLmask\n\
	$fstMode [ SSID:$fstSSID Freq:$fstFreq SNR:$fstSNR $fstStatus ] $fstActive\n\
	$sndMode [ SSID:$sndSSID Freq:$sndFreq SNR:$sndSNR $sndStatus ] $sndActive\n\
	Local Time:$aDate $aTime Uptime:$aUptime >> Please menu select: \n" 22 76 12 \
	$2 \
	2> $tempfile
END
)

eval $menucmd

	retval=$?

	case $retval in
	0)
		inputvar=$(cat $tempfile)
		;;
	1)
		inputvar=$4
		;;
	255)
		inputvar=$(tail -1 $tempfile)
		[ "$inputvar" != "timeout" ] && inputvar=$4
		;;
	esac

	if [ "$inputvar" = "--" ] ; then inputvar="" ; fi
}

readSystem() {
	cHostname=$(uci -q get system.@system[0].hostname)
	aDate=$(date +%Y-%m-%d)
	aTime=$(date +%T)
	aUptime=$(uptime | sed 's/.*up \([^,]*\), .*/\1/')
}

readNetwork() {
	cLip=$(uci -q get network.lan.ipaddr)
	cLmask=$(uci -q get network.lan.netmask)
}

# $1 = WiFi index
readWifi() {
	cWhwmode=$(uci -q get wireless.radio$1.hwmode)
	if [ "$cWhwmode" = "11g" ] ; then
		cWband="2.4"
	elif [ "$cWhwmode" = "11a" ] ; then
		cWband="5"
	else
		cWband="unknown"
	fi
	cWdisabled=$(uci -q get wireless.@wifi-iface[$1].disabled)
	cWwds=$(uci -q get wireless.@wifi-iface[$1].wds)
	cWimode=$(uci -q get wireless.@wifi-iface[$1].mode)
	[ "$cWdisabled" = "1" ] && {
		cWmode="Disable"
	} || {
		[ "$cWimode" = "ap" ] && {
			[ "$cWwds" = "1" ] && {
				cWmode="APW"
			} || {
				cWmode="AP"
			}
		}
		[ "$cWimode" = "sta" ] && {
			[ "$cWwds" = "1" ] && {
				cWmode="STW"
			} || {
				cWmode="ST"
			}
		}
		[ "$cWimode" != "ap" ] && [ "$cWimode" != "sta" ] && {
			cWmode=$cWimode
		}
	}
    cWch=$(uci -q get wireless.radio$1.channel)
    [ "$cWch" != "auto" ] && {
            cWfreq=$(iw phy$1 info | \
                    grep -E -m1 "(\* .... MHz \[$cWch\])" | \
                    awk '{print $2}' | \
                    sed -e "s/\([0-9]\)\([0-9]*\)/\1\.\2/")
    } || {
            cWfreq="auto"
    }
	#cWfreq=$(uci -q get wireless.radio$1.channel)
	cWssid=$(uci -q get wireless.@wifi-iface[$1].ssid)
	cWinlimit=$(uci -q get wireless.@wifi-iface[$1].max_inactivity)
	[ -z "$cWinlimit" ] && cWinlimit="0"
	cWencr=$(uci -q get wireless.@wifi-iface[$1].encryption)
	if [ "$cWencr" = "psk2+ccmp" ] ; then        
		cWkey=$(uci -q get wireless.@wifi-iface[$1].key)
	else
		cWkey=$(uci -q get wireless.@wifi-iface[$1].key1 | cut -c3-)
	fi

	cWch=$(iwinfo wlan$1 info 2> /dev/null | grep Channel | awk '{print $4}')
	[ "$cWch" = "unknown" ] && {
		cWch=$(uci -q get wireless.radio0.channel)
	}
	[ "$cWch" = "auto" ] && {
		cWfreq_a="Auto"
	} || {
		cWfreq_a=$(iw phy$1 info | \
                    grep -E -m1 "(\* .... MHz \[$cWch\])" | \
                    awk '{print $2}' | \
                    sed -e "s/\([0-9]\)\([0-9]*\)/\1\.\2/")
	}
	cWsnr=$(iwinfo wlan$1 info 2> /dev/null | grep Link | awk '{print $6}' | cut -d'/' -f1)
	([ -z "$cWsnr" ] || [ "$cWsnr" = "unknown" ]) && cWsnr=0
	[ "$cWimode" = "ap" ] && {
		cWcnt=$(iwinfo wlan$1 assoclist 2> /dev/null | grep -cE '^([0-9A-F]{2}:){5}[0-9A-F]{2}')
	}
	[ "$cWimode" = "sta" ] && {
		cWap=$(iwinfo wlan$1 info 2> /dev/null | grep Access | awk '{ print $3 }')
		([ -z "$cWap" ] || [ "$cWap" = "00:00:00:00:00:00" ]) && cWap="Not-Associated"
	}
}

readWifiAct() {
	fstDisabled=$(uci -q get wireless.@wifi-iface[0].disabled)
	fstWds=$(uci -q get wireless.@wifi-iface[0].wds)
	fstImode=$(uci -q get wireless.@wifi-iface[0].mode)
	[ "$fstDisabled" = "1" ] && {
		fstMode="Disable"
	} || {
		[ "$fstImode" = "ap" ] && {
			[ "$fstWds" = "1" ] && {
				fstMode="APW"
			} || {
				fstMode="AP"
			}
		}
		[ "$fstImode" = "sta" ] && {
			[ "$fstWds" = "1" ] && {
				fstMode="STW"
			} || {
				fstMode="ST"
			}
		}
		[ "$fstImode" != "ap" ] && [ "$fstImode" != "sta" ] && {
			fstMode=$fstImode
		}
	}
	fstSSID=$(uci -q get wireless.@wifi-iface[0].ssid)
	fstCh=$(iwinfo wlan0 info 2> /dev/null | grep Channel | awk '{print $4}')
	[ "$fstCh" = "unknown" ] && {
		fstCh=$(uci -q get wireless.radio0.channel)
	}
	[ "$fstCh" = "auto" ] && {
		fstFreq="Auto"
	} || {
		fstFreq=$(iw phy0 info | \
                    grep -E -m1 "(\* .... MHz \[$fstCh\])" | \
                    awk '{print $2}' | \
                    sed -e "s/\([0-9]\)\([0-9]*\)/\1\.\2/")
	}
	fstSNR=$(iwinfo wlan0 assoclist 2> /dev/null | grep SNR | awk -F'[()]' '{print $2}' | awk '{print $2}')
	[ -z "$fstSNR" ] && fstSNR=0
	[ "$fstImode" = "ap" ] && {
		fstCnt=$(iwinfo wlan0 assoclist 2> /dev/null | grep -cE '^([0-9A-F]{2}:){5}[0-9A-F]{2}')
		fstStatus="Cnt:$fstCnt"
	}
	[ "$fstImode" = "sta" ] && {
		fstAP=$(iwinfo wlan0 info 2> /dev/null | grep Access | awk '{ print $3 }')
		([ -z "$fstAP" ] || [ "$fstAP" = "00:00:00:00:00:00" ]) && fstAP="Not-Associated"
		fstStatus="$fstAP"
	}

	sndDisabled=$(uci -q get wireless.@wifi-iface[1].disabled)
	sndWds=$(uci -q get wireless.@wifi-iface[1].wds)
	sndImode=$(uci -q get wireless.@wifi-iface[1].mode)
	[ "$sndDisabled" = "1" ] && {
		sndMode="Disable"
	} || {
		[ "$sndImode" = "ap" ] && {
			[ "$sndWds" = "1" ] && {
				sndMode="APW"
			} || {
				sndMode="AP"
			}
		}
		[ "$sndImode" = "sta" ] && {
			[ "$sndWds" = "1" ] && {
				sndMode="STW"
			} || {
				sndMode="ST"
			}
		}
		[ "$sndImode" != "ap" ] && [ "$sndImode" != "sta" ] && {
			sndMode=$sndImode
		}
	}
	sndSSID=$(uci -q get wireless.@wifi-iface[1].ssid)
	sndCh=$(iwinfo wlan1 info 2> /dev/null | grep Channel | awk '{print $4}')
	[ "$sndCh" = "unknown" ] && {
		sndCh=$(uci -q get wireless.radio1.channel)
	}
	[ "$sndCh" = "auto" ] && {
		sndFreq="Auto"
	} || {
		sndFreq=$(iw phy1 info | \
                    grep -E -m1 "(\* .... MHz \[$sndCh\])" | \
                    awk '{print $2}' | \
                    sed -e "s/\([0-9]\)\([0-9]*\)/\1\.\2/")
	}
	sndSNR=$(iwinfo wlan1 assoclist 2> /dev/null | grep SNR | awk -F'[()]' '{print $2}' | awk '{print $2}')
	[ -z "$sndSNR" ] && sndSNR=0
	[ "$sndImode" = "ap" ] && {
		sndCnt=$(iwinfo wlan1 assoclist 2> /dev/null | grep -cE '^([0-9A-F]{2}:){5}[0-9A-F]{2}')
		sndStatus="Cnt:$sndCnt"
	}
	[ "$sndImode" = "sta" ] && {
		sndAP=$(iwinfo wlan1 info 2> /dev/null | grep Access | awk '{ print $3 }')
		([ -z "$sndAP" ] || [ "$sndAP" = "00:00:00:00:00:00" ]) && sndAP="Not-Associated"
		sndStatus="$sndAP"
	}

	#-----------------------------#
	### Load dual station roaming configurations from file
	[ -e /etc/dwsb/dual_sta_roaming.cfg ] && {
		cp /etc/dwsb/dual_sta_roaming.cfg /tmp/dual_sta_roaming.cfg
		. /tmp/dual_sta_roaming.cfg
	}
	USE_DUALSTAROAM_MODE=$_USE_DUALSTAROAM_MODE
	#-----------------------------#
	## Set default first Network active
	fstActive=""
	## Set default second Network active
	sndActive=""
	## Check Dual Station mode
	if ([ "$USE_DUALSTAROAM_MODE" = "Y" ] && [ "$fstImode" = "sta" ] && [ "$sndImode" = "sta" ]) ; then
		## Get active network info
		brctlShow=$(brctl show)
		## Get first Network active
		[ $(echo $brctlShow | grep -c wlan0) -eq 1 ] && {
			fstActive="<--- Active"
		}
		## Get second Network active
		[ $(echo $brctlShow | grep -c wlan1) -eq 1 ] && {
			sndActive="<--- Active"
		}
	fi
}

# $1 = IPv4 string to validate
isValidIPv4() {
	local OLDIFS=$IFS
	if expr "$1" : '[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*$' >/dev/null; then
		IFS=.
		set $1
		for quad in 1 2 3 4; do
			if eval [ \$$quad -gt 255 ]; then
				IFS=$OLDIFS
				return 1
			fi
		done
		IFS=$OLDIFS
		return 0
	fi
	IFS=$OLDIFS
	return 1
}

# $1 = Date string to validate as "YYYY-MM-DD"
isValidDate() {
	local OLDIFS=$IFS
	if expr "$1" : '[0-9]*\-[0-9]*\-[0-9]*$' >/dev/null; then
		IFS=-
		set $1
		#echo "year="$1
		#echo "month="$2
		#echo "day="$3
		if eval [ $1 -lt 1900 ]; then
			IFS=$OLDIFS
			return 1
		fi
		if eval [ $1 -gt 2999 ]; then
			IFS=$OLDIFS
			return 1
		fi
		if eval [ $2 -lt 1 ]; then
			IFS=$OLDIFS
			return 1
		fi
		if eval [ $2 -gt 12 ]; then
			IFS=$OLDIFS
			return 1
		fi
		if eval [ $3 -lt 1 ]; then
			IFS=$OLDIFS
			return 1
		fi
		if eval [ $3 -gt 31 ]; then
			IFS=$OLDIFS
			return 1
		fi
		IFS=$OLDIFS
		return 0
	fi
	IFS=$OLDIFS
	return 1
}

# $1 = Time string to validate as "HH:MM:SS"
isValidTime() {
	local OLDIFS=$IFS
	if expr "$1" : '[0-9]*\:[0-9]*\:[0-9]*$' >/dev/null; then
		IFS=:
		set $1
		#echo "H="$1
		#echo "M="$2
		#echo "S="$3
		if eval [ $1 -lt 0 ]; then
			IFS=$OLDIFS
			return 1
		fi
		if eval [ $1 -gt 23 ]; then
			IFS=$OLDIFS
			return 1
		fi
		if eval [ $2 -lt 0 ]; then
			IFS=$OLDIFS
			return 1
		fi
		if eval [ $2 -gt 59 ]; then
			IFS=$OLDIFS
			return 1
		fi
		if eval [ $3 -lt 0 ]; then
			IFS=$OLDIFS
			return 1
		fi
		if eval [ $3 -gt 59 ]; then
			IFS=$OLDIFS
			return 1
		fi
		IFS=$OLDIFS
		return 0
	fi
	IFS=$OLDIFS
	return 1
}

########################## begin

rm -f $tempfile
