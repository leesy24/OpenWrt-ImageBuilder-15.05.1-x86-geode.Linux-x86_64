#!/bin/sh
# (C) 2020 DASAN InfoTek,
#           leesy@DSI
##
DIALOG=${DIALOG=dialog}

tempfile="/tmp/common$$"
trap "rm -f $tempfile; exit" 0 1 2 5 15

. /etc/company_release

init_config_org() {
	uci show system > /tmp/config_org
	uci show network >> /tmp/config_org
	uci show wireless >> /tmp/config_org
}

get_config_new_org_value() {
	local config
	config=$(echo $1 | sed "s/\[/\\\[/; s/\]/\\\]/")
	config="${config}="
	local val
	val=$(grep "set" /tmp/config_new_batch 2>/dev/null | grep "$config" | tail -1 | cut -d"=" -f2 | cut -d"'" -f2)
	[ -z "$val" ] && val=$(grep "$config" /tmp/config_org | cut -d"=" -f2 | cut -d"'" -f2)
	echo $val
}

clean_config_new() {
	rm -f /tmp/config_new_batch
}

add_config_new_set_cmd() {
	local set_cmd="set ${1}"
	[ -f /tmp/config_new_batch ] && {
		local cmd_remove="$(echo "$set_cmd" | sed "s/\[/\\\[/; s/\]/\\\]/" | cut -d'=' -f1)"
		grep -v "$cmd_remove" /tmp/config_new_batch > /tmp/.config_new_batch
		mv /tmp/.config_new_batch /tmp/config_new_batch
	}
	echo "$set_cmd" >> /tmp/config_new_batch
}

add_config_new_any_cmd() {
	[ -f /tmp/config_new_batch ] && {
		local cmd_remove="$(echo "$@" | sed "s/\[/\\\[/; s/\]/\\\]/" | cut -d'=' -f1)"
		grep -v "$cmd_remove" /tmp/config_new_batch > /tmp/.config_new_batch
		mv /tmp/.config_new_batch /tmp/config_new_batch
	}
	echo "$@" >> /tmp/config_new_batch
}

apply_config_new_4_commit() {
	[ -f /tmp/config_new_batch ] && uci batch -f /tmp/config_new_batch
}

get_config_new_changes_count() {
	local count=$(wc -l /tmp/config_new_batch 2>/dev/null | awk '{print $1}')
	[ -z "$count" ] && count=0
	echo $count
}

textinput() {
	$DIALOG \
		--ascii-lines --title "INPUT BOX" --clear \
		--inputbox "$1" 20 76 "$2" 2> $tempfile

	retval=$?

	case $retval in
	0)
		inputvar=$(cat $tempfile)
		;;
	1)
		inputvar=$2
		;;
	255)
		inputvar=$2
		;;
	esac

	if [ "$inputvar" = "--" ] ; then inputvar="" ; fi
}

menuinput() {

	readActual_System
	readActual_Network
	readActual_Wifi

	menucmd=$(cat <<END    
$DIALOG --ascii-lines --clear --cr-wrap --timeout 60 \
	--title "[ $MODEL $NAME@$YEAR - $1 ]" \
	--menu "$3\
	Hostname:$aHostname IP:$aLip/$aLmask\n\
	$aFstStat [ SSID:$aFstSSID Freq:$aFstFreq SNR:$aFstSNR $aFstPeer ] $aFstActive\n\
	$aSndStat [ SSID:$aSndSSID Freq:$aSndFreq SNR:$aSndSNR $aSndPeer ] $aSndActive\n\
	Local Time:$aDate $aTime Uptime:$aUptime >> Please select menu: \n" 22 76 12 \
	$2 \
	2> $tempfile
END
)

eval $menucmd

	retval=$?

	case $retval in
	0)
		inputvar=$(cat $tempfile)
		;;
	1)
		inputvar=$4
		;;
	255)
		inputvar=$(tail -1 $tempfile)
		[ "$inputvar" != "timeout" ] && inputvar=$4
		;;
	esac

	if [ "$inputvar" = "--" ] ; then inputvar="" ; fi
}

# $1 = radio index
# return = 1:WiFi is down, 0:WiFi is up
isWiFiDown() {
	#iwinfo wlan$1 info > /dev/null 2> /dev/null
	wifi status radio$1 2>/dev/null | grep up | grep -q true
	echo $?
}

readActual_System() {
	#aHostname=$(uci -q get system.@system[0].hostname)
	aHostname=$(cat /proc/sys/kernel/hostname)
	aDate=$(date +%Y-%m-%d)
	aTime=$(date +%T)
	aUptime=$(uptime | sed 's/.*up \([^,]*\), .*/\1/')
}

readNewOrg_System() {
	cHostname=$(get_config_new_org_value system.@system[0].hostname)
	cDate=$(date +%Y-%m-%d)
	cTime=$(date +%T)
}

readActual_Network() {
	ifconfig br-lan 2>/dev/null > /tmp/ifconfig_br-lan
	aLip=$(grep "inet addr" /tmp/ifconfig_br-lan | awk '{print $2}' | cut -d":" -f2)
	([ -z "$aLip" ]) && aLip=$(uci -q get network.lan.ipaddr)
	aLmask=$(grep "Mask" /tmp/ifconfig_br-lan | awk '{print $4}' | cut -d":" -f2)
	([ -z "$aLmask" ]) && aLmask=$(uci -q get network.lan.netmask)
}

readNewOrg_Network() {
	cLip=$(get_config_new_org_value network.lan.ipaddr)
	cLmask=$(get_config_new_org_value network.lan.netmask)
}

readActual_Wifi() {
	local disabled=$(uci -q get wireless.@wifi-iface[0].disabled)
	local wds=$(uci -q get wireless.@wifi-iface[0].wds)
	local mode_0=$(uci -q get wireless.@wifi-iface[0].mode)
	if [ "$disabled" = "1" ]; then
		mode_0=""
		aFstStat="Disabled"
		mode_0=""
		aFstSSID="----"
		aFstFreq="-----"
		aFstSNR="--"
		aFstPeer="-----"
	else
		[ "$mode_0" = "ap" ] && {
			[ "$wds" = "1" ] && {
				aFstStat="APW"
			} || {
				aFstStat="AP"
			}
		}
		[ "$mode_0" = "sta" ] && {
			[ "$wds" = "1" ] && {
				aFstStat="STW"
			} || {
				aFstStat="ST"
			}
		}
		[ "$mode_0" != "ap" ] && [ "$mode_0" != "sta" ] && {
			aFstStat=$mode_0
		}
		aFstSSID=$(uci -q get wireless.@wifi-iface[0].ssid)
		iwinfo wlan0 info 2>/dev/null > /tmp/iwinfo_info_wlan0
		iwinfo wlan0 assoclist 2>/dev/null > /tmp/iwinfo_assoclist_wlan0
		local chan=$(grep "Channel" /tmp/iwinfo_info_wlan0 | awk '{print $4}')
		([ -z "$chan" ] || [ "$chan" = "unknown" ]) && {
			chan=$(uci -q get wireless.radio0.channel)
		}
		[ "$chan" = "auto" ] && {
			aFstFreq="Auto"
		} || {
			aFstFreq=$(getFrequencyGHz 0 $chan)
		}
		# aFstSNR=$(grep "SNR" /tmp/iwinfo_assoclist_wlan0 | awk -F'[()]' '{print $2}' | awk '{print $2}')
		# [ -z "$aFstSNR" ] && aFstSNR=0
		aFstSNR=$(grep "Link" /tmp/iwinfo_info_wlan0 | awk '{print $6}' | cut -d'/' -f1)
		([ -z "$aFstSNR" ] || [ "$aFstSNR" = "unknown" ]) && aFstSNR=0
		[ "$mode_0" = "ap" ] && {
			local cnt=$(grep -cE "^([0-9A-F]{2}:){5}[0-9A-F]{2}" /tmp/iwinfo_assoclist_wlan0)
			[ -z "$cnt" ] && cnt=0
			aFstPeer="Cnt:$cnt"
		}
		[ "$mode_0" = "sta" ] && {
			local ap=$(grep "Access" /tmp/iwinfo_info_wlan0 | awk '{print $3}')
			([ -z "$ap" ] || [ "$ap" = "00:00:00:00:00:00" ]) && ap="Not-Associated"
			aFstPeer="$ap"
		}
	fi

	disabled=$(uci -q get wireless.@wifi-iface[1].disabled)
	wds=$(uci -q get wireless.@wifi-iface[1].wds)
	local mode_1=$(uci -q get wireless.@wifi-iface[1].mode)
	if [ "$disabled" = "1" ]; then
		mode_1=""
		aSndStat="Disabled"
		aSndSSID="----"
		aSndFreq="-----"
		aSndSNR="--"
		aSndPeer="-----"
	else
		[ "$mode_1" = "ap" ] && {
			[ "$wds" = "1" ] && {
				aSndStat="APW"
			} || {
				aSndStat="AP"
			}
		}
		[ "$mode_1" = "sta" ] && {
			[ "$wds" = "1" ] && {
				aSndStat="STW"
			} || {
				aSndStat="ST"
			}
		}
		[ "$mode_1" != "ap" ] && [ "$mode_1" != "sta" ] && {
			aSndStat=$mode_1
		}
		aSndSSID=$(uci -q get wireless.@wifi-iface[1].ssid)
		iwinfo wlan1 info 2>/dev/null > /tmp/iwinfo_info_wlan1
		iwinfo wlan1 assoclist 2>/dev/null > /tmp/iwinfo_assoclist_wlan1
		chan=$(grep "Channel" /tmp/iwinfo_info_wlan1 | awk '{print $4}')
		([ -z "$chan" ] || [ "$chan" = "unknown" ]) && {
			chan=$(uci -q get wireless.radio1.channel)
		}
		[ "$chan" = "auto" ] && {
			aSndFreq="Auto"
		} || {
			aSndFreq=$(getFrequencyGHz 1 $chan)
		}
		# aSndSNR=$(iwinfo wlan1 assoclist 2>/dev/null | grep SNR | awk -F'[()]' '{print $2}' | awk '{print $2}')
		# [ -z "$aSndSNR" ] && aSndSNR=0
		aSndSNR=$(grep "Link" /tmp/iwinfo_info_wlan1 | awk '{print $6}' | cut -d'/' -f1)
		([ -z "$aSndSNR" ] || [ "$aSndSNR" = "unknown" ]) && aSndSNR=0
		[ "$mode_1" = "ap" ] && {
			local cnt=$(grep -cE "^([0-9A-F]{2}:){5}[0-9A-F]{2}" /tmp/iwinfo_assoclist_wlan1)
			[ -z "$cnt" ] && cnt=0
			aSndPeer="Cnt:$cnt"
		}
		[ "$mode_1" = "sta" ] && {
			local ap=$(grep "Access" /tmp/iwinfo_info_wlan1 | awk '{print $3}')
			([ -z "$ap" ] || [ "$ap" = "00:00:00:00:00:00" ]) && ap="Not-Associated"
			aSndPeer="$ap"
		}
	fi

	#-----------------------------#
	local USE_DUALSTAROAM_MODE
	### Load dual station roaming configurations from file
	if [ -e /etc/dwsb/dual_sta_roaming.cfg ]; then
		. /etc/dwsb/dual_sta_roaming.cfg
		USE_DUALSTAROAM_MODE=$_USE_DUALSTAROAM_MODE
	else
		USE_DUALSTAROAM_MODE="N"
	fi

	local USE_LINKINTEGRITYCHECK_MODE_0
	### Load link integrity checking configurations for 1st AP from file
	if [ -e /etc/dwsb/link_int_checking_0.cfg ]; then
		. /etc/dwsb/link_int_checking_0.cfg
		USE_LINKINTEGRITYCHECK_MODE_0=$_USE_LINKINTEGRITYCHECK_MODE
	else
		USE_LINKINTEGRITYCHECK_MODE_0="N"
	fi

	local USE_LINKINTEGRITYCHECK_MODE_1
	### Load link integrity checking configurations for 1st AP from file
	if [ -e /etc/dwsb/link_int_checking_1.cfg ]; then
		. /etc/dwsb/link_int_checking_1.cfg
		USE_LINKINTEGRITYCHECK_MODE_1=$_USE_LINKINTEGRITYCHECK_MODE
	else
		USE_LINKINTEGRITYCHECK_MODE_1="N"
	fi

	#-----------------------------#
	## Set default first Network active
	aFstActive=""
	## Set default second Network active
	aSndActive=""
	## Check Dual Station mode
	if ([ "$USE_DUALSTAROAM_MODE" = "Y" ] && [ "$mode_0" = "sta" ] && [ "$mode_1" = "sta" ]); then
		## Get active bridge network info
		brctl show 2>/dev/null > /tmp/brctl_show
		## Get first network active on bridge
		[ $(grep -c "wlan0" /tmp/brctl_show) -eq 1 ] && {
			aFstActive="<--- Active"
		}
		## Get second network active on bridge
		[ $(grep -c "wlan1" /tmp/brctl_show) -eq 1 ] && {
			aSndActive="<--- Active"
		}
	fi

	## Check Link Initegrity Checking mode for 1st AP
	if ([ "$USE_LINKINTEGRITYCHECK_MODE_0" = "Y" ] && [ "$mode_0" = "ap" ]); then
		# Check 1st WiFi is down
		if [ $(isWiFiDown 0) -eq 1 ]; then
			aFstActive="<--- Down!"
		fi
	fi

	## Check Link Initegrity Checking mode for 2nd AP
	if ([ "$USE_LINKINTEGRITYCHECK_MODE_1" = "Y" ] && [ "$mode_1" = "ap" ]); then
		# Check 1st WiFi is down
		if [ $(isWiFiDown 1) -eq 1 ]; then
			aSndActive="<--- Down!"
		fi
	fi
}

# $1 = WiFi index
readNewOrg_Wifi() {
	local hwmode=$(get_config_new_org_value wireless.radio$1.hwmode)
	if [ "$hwmode" = "11g" ] ; then
		cWband="2.4"
	elif [ "$hwmode" = "11a" ] ; then
		cWband="5"
	else
		cWband="unknown"
	fi
	cWdisabled=$(get_config_new_org_value wireless.@wifi-iface[$1].disabled)
	local wds=$(get_config_new_org_value wireless.@wifi-iface[$1].wds)
	cWmode=$(get_config_new_org_value wireless.@wifi-iface[$1].mode)
	[ "$cWdisabled" = "1" ] && {
		cWstat="Disable"
	} || {
		[ "$cWmode" = "ap" ] && {
			[ "$wds" = "1" ] && {
				cWstat="APW"
			} || {
				cWstat="AP"
			}
		}
		[ "$cWmode" = "sta" ] && {
			[ "$wds" = "1" ] && {
				cWstat="STW"
			} || {
				cWstat="ST"
			}
		}
		[ "$cWmode" != "ap" ] && [ "$cWmode" != "sta" ] && {
			cWstat=$cWmode
		}
	}
    local chan=$(get_config_new_org_value wireless.radio$1.channel)
    [ "$chan" != "auto" ] && {
            cWfreq=$(getFrequencyGHz $1 $chan)
    } || {
            cWfreq="auto"
    }
	cWssid=$(get_config_new_org_value wireless.@wifi-iface[$1].ssid)
	cWinlimit=$(get_config_new_org_value wireless.@wifi-iface[$1].max_inactivity)
	[ -z "$cWinlimit" ] && cWinlimit="0"
	cWencr=$(get_config_new_org_value wireless.@wifi-iface[$1].encryption)
	if [ "$cWencr" = "psk2+ccmp" ] ; then        
		cWkey=$(get_config_new_org_value wireless.@wifi-iface[$1].key)
	else
		cWkey=$(get_config_new_org_value wireless.@wifi-iface[$1].key1 | cut -c3-)
	fi
}

# $1 = phy index
# $2 = frequency in MHz
getChannel() {
	local phy_index=$1
	local chan=$2

	[ ! -f /tmp/iw_info_phy$phy_index ] && iw phy$phy_index info 2>/dev/null > /tmp/iw_info_phy$phy_index

	grep -E -m1 "(\* $chan MHz \[[0-9]*\])" /tmp/iw_info_phy$phy_index | \
		cut -d'[' -f2 | cut -d']' -f1
}

# $1 = phy index
# $2 = channel number
getFrequencyGHz() {
	local phy_index=$1
	local chan=$2

	[ ! -f /tmp/iw_info_phy$phy_index ] && iw phy$phy_index info 2>/dev/null > /tmp/iw_info_phy$phy_index

	grep -E -m1 "(\* ${chan:-....} MHz${chan:+|\\[$chan\\]})" /tmp/iw_info_phy$phy_index | \
		grep "MHz" | \
		awk '{print $2}' | \
		sed -e "s/\([0-9]\)\([0-9]*\)/\1\.\2/"
}

# $1 = IPv4 string to validate
isValidIPv4() {
	local OLDIFS=$IFS
	if expr "$1" : '[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*$' >/dev/null; then
		IFS=.
		set $1
		for quad in 1 2 3 4; do
			if eval [ \$$quad -gt 255 ]; then
				IFS=$OLDIFS
				return 1
			fi
		done
		IFS=$OLDIFS
		return 0
	fi
	IFS=$OLDIFS
	return 1
}

# $1 = Date string to validate as "YYYY-MM-DD"
isValidDate() {
	local OLDIFS=$IFS
	if expr "$1" : '[0-9]*\-[0-9]*\-[0-9]*$' >/dev/null; then
		IFS=-
		set $1
		#echo "year="$1
		#echo "month="$2
		#echo "day="$3
		if eval [ $1 -lt 1900 ]; then
			IFS=$OLDIFS
			return 1
		fi
		if eval [ $1 -gt 2999 ]; then
			IFS=$OLDIFS
			return 1
		fi
		if eval [ $2 -lt 1 ]; then
			IFS=$OLDIFS
			return 1
		fi
		if eval [ $2 -gt 12 ]; then
			IFS=$OLDIFS
			return 1
		fi
		if eval [ $3 -lt 1 ]; then
			IFS=$OLDIFS
			return 1
		fi
		if eval [ $3 -gt 31 ]; then
			IFS=$OLDIFS
			return 1
		fi
		IFS=$OLDIFS
		return 0
	fi
	IFS=$OLDIFS
	return 1
}

# $1 = Time string to validate as "HH:MM:SS"
isValidTime() {
	local OLDIFS=$IFS
	if expr "$1" : '[0-9]*\:[0-9]*\:[0-9]*$' >/dev/null; then
		IFS=:
		set $1
		#echo "H="$1
		#echo "M="$2
		#echo "S="$3
		if eval [ $1 -lt 0 ]; then
			IFS=$OLDIFS
			return 1
		fi
		if eval [ $1 -gt 23 ]; then
			IFS=$OLDIFS
			return 1
		fi
		if eval [ $2 -lt 0 ]; then
			IFS=$OLDIFS
			return 1
		fi
		if eval [ $2 -gt 59 ]; then
			IFS=$OLDIFS
			return 1
		fi
		if eval [ $3 -lt 0 ]; then
			IFS=$OLDIFS
			return 1
		fi
		if eval [ $3 -gt 59 ]; then
			IFS=$OLDIFS
			return 1
		fi
		IFS=$OLDIFS
		return 0
	fi
	IFS=$OLDIFS
	return 1
}

########################## begin

rm -f $tempfile
