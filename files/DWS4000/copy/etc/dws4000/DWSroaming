#!/bin/sh
#
#####################################################################
##
##      DWS4000 SNR_Roaming for Chaos Calmer 15.05.1 @linux3.18
##
##                Copyright 2019, by Dasan InfoTek Co., 
##
##                         ...leesy...
##
#####################################################################

#-----------------------------#
cp /etc/dws4000/wroaming.config /tmp/wroaming.config
. /tmp/wroaming.config
#-----------------------------#

iw phy0 info > /tmp/DWSroaming_phy0

get_actSSID() {
	iw dev wlan0 link 2> /dev/null | grep "SSID:" | awk '{ print $2 }'
}

get_curSSID() {
	uci -q get wireless.@wifi-iface[0].ssid
}

get_actFreqMHz() {
	iw dev wlan0 link 2> /dev/null | grep "freq:" | awk '{ print $2 }'
}

get_curFreqMHz() {
	local freq
	freq=$(grep -E -m1 "(\* .... MHz \[$(uci -q get wireless.radio0.channel)\])" /tmp/DWSroaming_phy0 | \
		awk '{print $2}')
	[ -z "$freq" ] && freq="0000"
	echo $freq
}

# $1 = frequency in MHz
get_MHz2GHz() {
	echo $1 | sed -e "s/\([0-9]\)\([0-9]*\)/\1\.\2/"
}

get_actSNR() {
	local SNR
	SNR=$(iwinfo wlan0 info 2> /dev/null | grep Link | awk '{print $6}' | cut -d'/' -f1)
	[ -z "$SNR" ] && SNR=-2
	[ "$SNR" = "unknown" ] && SNR=-1
	echo $SNR
}

get_RXpkts() {
	ifconfig wlan0 | grep "RX packets" | awk '{ print $2 }' | cut -c9-
}

# $1 = frequency in MHz
get_channel() {
	grep -E -m1 "(\* $1 MHz \[[0-9]*\])" /tmp/DWSroaming_phy0 | \
		cut -d'[' -f2 | cut -d']' -f1
}

# $1: new channel
change_channel() {
	#echo "change_channel $1"
	uci set wireless.radio0.channel=$1
	uci commit
	/etc/init.d/network reload >/dev/null
}

# $1: new frequency in MHz
change_freq() {
	local targetFreq=$1
	local ch
	#echo "change_freq targetFreq=$targetFreq"

	ch=$(get_channel $targetFreq)
	# check string is null
	[ -z "$ch" ] && exit -1 

	change_channel $ch

	local timer=0
	local timeout=30 # 3secs <- 100msec x 30
	#local timeout=50 # 5secs <- 100msec x 50
	local actSSID
	local actFreq
	while : ; do
		msleep 100

		actSSID=$(get_actSSID)
		[ "$actSSID" = "$curSSID" ] && {
			actFreq=$(get_actFreqMHz)
			#echo -n "$actFreq "
			[ "$actFreq" = "$targetFreq" ] && break
			# check string is not null
			[ -n "$actFreq" ] && {
				/etc/init.d/network restart
				sleep 1
			}
		}

		timer=$((timer+1))
		[ $timer -ge $timeout ] && break
	done
}

### Start of main script

rm -f /tmp/.force_Roaming

#sleep 1

snrMin=$wlan0_RunSNR
runFreqGHz1=$wlan0_RunFreq1 # in GHz
runFreqGHz2=$wlan0_RunFreq2 # in GHz
runFreqMHz1=$(echo "$runFreqGHz1*1000/1" | bc) # to MHz
runFreqMHz2=$(echo "$runFreqGHz2*1000/1" | bc) # to MHz
PingIP=$wlan0_PingIP
PingTO=$wlan0_PingTO
PingFC=$wlan0_PingFC
[ -z "$PingFC" ] && $PingFC=0

curSSID=$(get_curSSID)
curFreqMHz=$(get_curFreqMHz) # to MHz
curFreqGHz=$(get_MHz2GHz $curFreqMHz) # in GHz

actSNR=0
actFreqMHz=$(get_actFreqMHz)

echo "DWSroaming: SNRmin=$snrMin F1=$runFreqGHz1 F2=$runFreqGHz2 PingIP=$PingIP PingTO="$PingTO"msec PingFC=$PingFC" > /dev/kmsg
echo "DWSroaming: curF=$curFreqGHz=$(get_MHz2GHz $actFreqMHz) SSID=$curSSID" > /dev/kmsg

# Check current Freq must runFreq1 or 2.
[ $curFreqMHz -ne $runFreqMHz1 ] && [ $curFreqMHz -ne $runFreqMHz2 ] && {
	echo -n "DWSroaming: Unknown: $curFreqGHz->$runFreqGHz1 " > /dev/kmsg
	change_freq $runFreqMHz1
	curFreqMHz=$(get_curFreqMHz) # to MHz
	curFreqGHz=$(get_MHz2GHz $curFreqMHz) # in GHz
	actFreqMHz=$(get_actFreqMHz)
	actSNR=$(get_actSNR)  ##!!
	echo "($curFreqGHz=$(get_MHz2GHz $actFreqMHz) $actSNR)" > /dev/kmsg
}

# Check and wait actual freq. match with freq. of config.
StartLoopTimer=0
StartLoopTimeout=5 # 5secs
while : ; do
	[ "$actFreqMHz" = "$curFreqMHz" ] && break
	# Check actual Freq is not null, mean is not equal with current Freq.
	[ -n "$actFreqMHz" ] && {
		/etc/init.d/network restart
		sleep 1
	}

	StartLoopTimer=$((StartLoopTimer+1))
	[ $StartLoopTimer -ge $StartLoopTimeout ] && {
		echo "DWSroaming: Error! curF=$curFreqMHz actF=$actFreqMHz" > /dev/kmsg
		break
	}

	sleep 1

	actFreqMHz=$(get_actFreqMHz)
done

curSNRerr=0
cLOOP=0
RXpkts=$(get_RXpkts)
curPingFC=-2 # set to wait early n ping success

# Main infinite loop
while : ; do
	# Check actual SNR lower and equal than minimum SNR
	actSNR=$(get_actSNR)  ##!!
	[ $actSNR -le $snrMin ] && {
		msleep 20
		actSNR=$(get_actSNR)  ##!!
		[ $actSNR -le $snrMin ] && {
			curSNRerr=1
		}
	}

	# Check need to roam
	if [ $curSNRerr -eq 1 ] || [ $curPingFC -ge $PingFC ] || [ -e /tmp/.force_Roaming ] ; then
		if [ -e /tmp/.force_Roaming ] ; then
			echo -n "DWSroaming: Forced: " > /dev/kmsg
		elif [ $curPingFC -ge $PingFC ] ; then
			echo -n "DWSroaming: Ping($curPingFC): " > /dev/kmsg
		else
			echo -n "DWSroaming: SNR($actSNR): " > /dev/kmsg
		fi

		echo -n "$curFreqGHz->" > /dev/kmsg
		
		cnt=1
		cntMax=4 # must be even value instead odd

		if [ $curFreqMHz -eq $runFreqMHz1 ] ; then
			echo -n "$runFreqGHz2 " > /dev/kmsg
			change_freq $runFreqMHz2 
			nextFreq=1
		elif [ $curFreqMHz -eq $runFreqMHz2 ] ; then
			echo -n "$runFreqGHz1 " > /dev/kmsg
			change_freq $runFreqMHz1
			nextFreq=2
		else
			echo -n "Freq_Unknown! " > /dev/kmsg
			change_freq $runFreqMHz1
			nextFreq=2
		fi

		while : ; do
			actSNR=$(get_actSNR)  ##!!
			if [ $snrMin -gt $actSNR ] ; then
				echo -n "@" > /dev/kmsg
				if [ $nextFreq -eq 1 ] ; then
					change_freq $runFreqMHz1
					nextFreq=2
				else
					change_freq $runFreqMHz2	
					nextFreq=1
				fi
			else
				echo -n "_($cnt)OK! " > /dev/kmsg
				break  ##--->
			fi
			
			cnt=$((cnt+1))
			if [ $cnt -ge $cntMax ] ; then
				echo -n "_($cnt)Fail! " > /dev/kmsg
				#/etc/init.d/network restart
				#sleep 5
				break  ##--->
			fi
		done

		curFreqMHz=$(get_curFreqMHz) # to MHz
		curFreqGHz=$(get_MHz2GHz $curFreqMHz) # in GHz
		actFreqMHz=$(get_actFreqMHz)
		actSNR=$(get_actSNR)  ##!!
		echo "($curFreqGHz=$(get_MHz2GHz $actFreqMHz) $actSNR)" > /dev/kmsg

		curSNRerr=0
		cLOOP=0
		RXpkts=$(get_RXpkts)
		curPingFC=-2 # set to wait early n ping success

		[ -e /tmp/.force_Roaming ] && rm -f /tmp/.force_Roaming
	fi

	msleep 100 ##2

	# Check can't ping
	if [ -z "$PingIP" ] || [ $PingFC -eq 0 ]; then
		cLOOP=$((cLOOP+1))
		# every 1sec = 100msec x 10
		[ $cLOOP -gt 10 ] && {
			cLOOP=0

			RXpkts2=$(get_RXpkts)
			if [ $RXpkts -eq $RXpkts2 ] ; then
				echo "DWSroaming: __NONE_RxPackets_?? " $RXpkts2 > /dev/kmsg
			fi

			RXpkts=$RXpkts2
		}
	else # Can ping
		while [ $curPingFC -lt $PingFC ]; do
			# Check fping return sucess
			fping -4 -b0 -t$PingTO -r1 -q $PingIP && {
				# fping returned success
				# Check early n ping status
				[ $curPingFC -lt 0 ] && {
					curPingFC=$((curPingFC+1))
					echo "DWSroaming: Early Ping success!($curPingFC)" > /dev/kmsg
					break
				}
				curPingFC=0
				break
			}

			# fping returned fail

			# Check early n ping status
			[ $curPingFC -lt 0 ] && {
				echo "DWSroaming: Early Ping fail!($curPingFC)" > /dev/kmsg
				break
			}

			curPingFC=$((curPingFC+1))
			echo "DWSroaming: Ping fail!($curPingFC)" > /dev/kmsg
		done
	fi
done

### End of main script
