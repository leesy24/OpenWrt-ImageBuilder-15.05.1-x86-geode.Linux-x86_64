#!/bin/sh
# (C) 2019 DASAN InfoTek,
#           leesy@DSI
##

iface_index=0

init_config_org() {
	uci show system > /tmp/config_org
	uci show network >> /tmp/config_org
	uci show wireless >> /tmp/config_org
}

get_config_new_org_value() {
	local config
	config=$(echo $1 | sed "s/\[/\\\[/; s/\]/\\\]/")
	config="${config}="
	local val
	val=$(grep "set" /tmp/config_new_batch 2> /dev/null | grep "$config" | tail -1 | cut -d"=" -f2 | cut -d"'" -f2)
	[ -z "$val" ] && val=$(grep "$config" /tmp/config_org | cut -d"=" -f2 | cut -d"'" -f2)
	echo $val
}

clean_config_new() {
	rm -f /tmp/config_new_batch
}

add_config_new_command() {
	[ -f /tmp/config_new_batch ] && {
		local cmd_remove="$(echo "$@" | sed "s/\[/\\\[/; s/\]/\\\]/" | cut -d'=' -f1)"
		grep -v "$cmd_remove" /tmp/config_new_batch > /tmp/.config_new_batch
		mv /tmp/.config_new_batch /tmp/config_new_batch
	}
	echo "$@" >> /tmp/config_new_batch
}

apply_config_new_4_commit() {
	uci batch -f /tmp/config_new_batch
}

get_config_new_changes_count() {
	local count=$(wc -l /tmp/config_new_batch 2> /dev/null | awk '{print $1}')
	[ -z "$count" ] && count=0
	echo $count
}

readActual_ModelName() {
	#ModelName=$(uci -q get system.@system[$iface_index].hostname)
	ModelName=$(cat /proc/sys/kernel/hostname)
}

readActual_Status() {
	#ChangesCount=$(get_config_new_changes_count)
	iwinfo wlan$iface_index info 2> /dev/null > /tmp/iwinfo_info_wlan$iface_index
	iwinfo wlan$iface_index assoclist 2> /dev/null > /tmp/iwinfo_assoclist_wlan$iface_index
	## if iwinfo command returned success
	if [ $? -eq 0 ] ; then
		rHWMODE=$(grep "HW Mode" /tmp/iwinfo_info_wlan$iface_index | awk '{print $5}')
		([ -z "$rHWMODE" ] || [ "$rHWMODE" = "unknown" ]) && {
			rHWMODE=$(uci -q get wireless.radio$iface_index.hwmode)
		}

		rSSID=$(grep "ESSID" /tmp/iwinfo_info_wlan$iface_index | awk '{print $3}' | cut -d'"' -f2)
		([ -z "$rSSID" ] || [ "$rSSID" = "unknown" ]) && {
			rSSID=$(uci -q get wireless.@wifi-iface[$iface_index].ssid)
		}

		rSNR=$(grep "Link" /tmp/iwinfo_info_wlan$iface_index | awk '{print $6}' | cut -d'/' -f1)
		([ -z "$rSNR" ] || [ "$rSNR" = "unknown" ]) && rSNR=0

		rFreq=$(grep "Channel" /tmp/iwinfo_info_wlan$iface_index | awk '{print $5}' | cut -c2-)
		([ -z "$rFreq" ] || [ "$rFreq" = "unknown)" ]) && {
			rFreq=$(getFrequencyGHz $(uci -q get wireless.radio$iface_index.channel))
		}

		rSTA=$(grep -cE '^([0-9A-F]{2}:){5}[0-9A-F]{2}' /tmp/iwinfo_assoclist_wlan$iface_index)
		([ -z "$rSTA" ] || [ "$rSTA" = "0" ]) && rSTA="No Station Connected"
	else
	## iwinfo command returned fail
		rHWMODE="Down by Link error!"
		rSSID=$(uci -q get wireless.@wifi-iface[$iface_index].ssid)
		rSNR=0
		rFreq=$(getFrequencyGHz $(uci -q get wireless.radio$iface_index.channel))
		rSTA="No Station Connected"
	fi
}

readNewOrg_WiFi() {
	local hwmode=$(get_config_new_org_value wireless.radio$iface_index.hwmode)
	if [ "$hwmode" = "11g" ]; then
		cWband="2.4"
	elif [ "$hwmode" = "11a" ]; then
		cWband="5"
	else
		cWband="unknown"
	fi
	local chan=$(get_config_new_org_value wireless.radio$iface_index.channel)
	if [ "$chan" != "auto" ]; then
		cWfreq=$(getFrequencyGHz $chan)
	else
		cWfreq="auto"
	fi
	cWssid=$(get_config_new_org_value wireless.@wifi-iface[$iface_index].ssid)
	cWencr=$(get_config_new_org_value wireless.@wifi-iface[$iface_index].encryption)
	if [ "$cWencr" = "psk2+ccmp" ] ; then        
		cWkey=$(get_config_new_org_value wireless.@wifi-iface[$iface_index].key)
	else
		cWkey=$(get_config_new_org_value wireless.@wifi-iface[$iface_index].key1 | cut -c3-)
	fi
}

readNewOrg_Network() {
	cLip=$(get_config_new_org_value network.lan.ipaddr)
	cLmask=$(get_config_new_org_value network.lan.netmask)
	cLgway=$(get_config_new_org_value network.lan.gateway)
	cLdns=$(get_config_new_org_value network.lan.dns)
}

readActual_DateTimeUpTime() {
	rDATE=$(date +%Y%m%e)
	upTime=$(uptime | cut -d',' -f1)
	rDATE="$rDATE $upTime"
}

# $1 = frequency in MHz
getChannel() {
	iw phy$iface_index info 2> /dev/null | \
		grep -E -m1 "(\* $1 MHz \[[0-9]*\])" | \
		cut -d'[' -f2 | cut -d']' -f1
}

# $1 = channel number
getFrequencyGHz() {
	local chan=$1
	iw phy$iface_index info 2> /dev/null | \
		grep -E -m1 "(\* ${chan:-....} MHz${chan:+|\\[$chan\\]})" | \
		grep MHz | \
		awk '{print $2}' | \
		sed -e "s/\([0-9]\)\([0-9]*\)/\1\.\2/"
}

# $1 = IPv4 string to validate
isValidIPv4() {
	local OLDIFS=$IFS
	if expr "$1" : '[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*$' >/dev/null; then
		IFS=.
		set $1
		for quad in 1 2 3 4; do
			if eval [ \$$quad -gt 255 ]; then
				IFS=$OLDIFS
				return 1
			fi
		done
		IFS=$OLDIFS
		return 0
	fi
	IFS=$OLDIFS
	return 1
}
