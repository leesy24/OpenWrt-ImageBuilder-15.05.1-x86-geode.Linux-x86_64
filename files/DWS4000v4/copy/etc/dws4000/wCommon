#!/bin/sh
# (C) 2019 DASAN InfoTek,
#           leesy@DSI
##

iface="wlan0"

readCFG() {
	## echo "wSSID=$cWssid $cWencr Key=$cWkey $cWip $cWmask $cWgway $cLip $cLmask $cSlogip $cWdns "

	##rSNR=$(iwinfo $iface info | grep Link | awk '{print $2}' | cut -d'=' -f2 | cut -d'/' -f1)
	##rFreq=$(iwinfo $iface info | grep  Freq  | awk '{ print $2 }' | cut -c11-)
	##rAP=$(iwinfo $iface info | grep Freq | awk '{ print $6 }')
	rFreq=$(iw phy0 info | \
		grep -E -m1 "(\* .... MHz \[$(uci -q get wireless.radio0.channel)\])" | \
		awk '{print $2}' | \
		sed -e "s/\([0-9]\)\([0-9]*\)/\1\.\2/")

	iwinfo $iface info > /tmp/wCommon_$iface
	##
	rSNR=$(grep Link /tmp/wCommon_$iface | awk '{print $6}' | cut -d'/' -f1)
	([ -z "$rSNR" ] || [ "$rSNR" = "unknown" ]) && rSNR=0
	#rFreq=$(grep Channel /tmp/wCommon_$iface | awk '{ print $5}' | cut -d'(' -f2 | cut -d')' -f1)
	rAP=$(grep Access /tmp/wCommon_$iface | awk '{ print $3 }')
	([ -z "$rAP" ] || [ "$rAP" = "00:00:00:00:00:00" ]) && rAP="Not-Associated"
	##
	rHWMODE=$(grep "HW Mode" /tmp/wCommon_$iface | awk '{print $5}')
	#rSSID=$(grep "ESSID" /tmp/wCommon_$iface | awk '{print $3}')
	rSSID=$(uci -q get wireless.@wifi-iface[0].ssid)
}

readWIFI() {
	cWssid=$(uci -q get wireless.@wifi-iface[0].ssid)
	cWencr=$(uci -q get wireless.@wifi-iface[0].encryption)
	if [ "$cWencr" = "psk2+ccmp" ] ; then        
		cWkey=$(uci -q get wireless.@wifi-iface[0].key)
	else
		cWkey=$(uci -q get wireless.@wifi-iface[0].key1 | cut -c3-)
	fi
}

readNET() {
	cWip=$(uci -q get network.wlan.ipaddr)
	cWmask=$(uci -q get network.wlan.netmask)
	cWgway=$(uci -q get network.wlan.gateway)

	cWdns=$(uci -q get network.wlan.dns)

	cLip=$(uci -q get network.lan.ipaddr)
	cLmask=$(uci -q get network.lan.netmask)

	cSlogip=$(uci -q get system.@system[0].log_ip)
}

readDATE() {
	rDATE=$(date +%Y%m%e)
	upTime=$(uptime | cut -d',' -f1)
	rDATE="$rDATE $upTime"
}

# $1 = frequency in MHz
getChannel() {
	iw phy0 info | \
		grep -E -m1 "(\* $1 MHz \[[0-9]*\])" | \
		cut -d'[' -f2 | cut -d']' -f1
}

# $1 = IPv4 string to validate
isValidIPv4() {
	local OLDIFS=$IFS
	if expr "$1" : '[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*$' >/dev/null; then
		IFS=.
		set $1
		for quad in 1 2 3 4; do
			if eval [ \$$quad -gt 255 ]; then
				IFS=$OLDIFS
				return 1
			fi
		done
		IFS=$OLDIFS
		return 0
	fi
	IFS=$OLDIFS
	return 1
}
